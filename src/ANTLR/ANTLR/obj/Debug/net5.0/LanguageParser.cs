//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Artis\source\repos\ANTLR\ANTLR\LanguageParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]

public partial class LanguageParser : Parser {
	public const int
		CURLYOPEN=1, CURLYCLOSE=2, BRACKETOPEN=3, BRACKETCLOSE=4, SQUAREOPEN=5, 
		SQUARECLOSE=6, SEMICOLON=7, COLON=8, QUOTE=9, DOT=10, COMA=11, HASH=12, 
		ARROWS=13, PROTECTION=14, NAME=15, WS=16, ANYTHING=17;
	public const int
		RULE_code = 0, RULE_blocks = 1, RULE_blockBody = 2, RULE_blockType = 3, 
		RULE_webMemoryClass = 4, RULE_classHead = 5, RULE_superClass = 6, RULE_classBody = 7, 
		RULE_className = 8, RULE_superClassName = 9, RULE_fields = 10, RULE_field = 11, 
		RULE_fieldDefinition = 12, RULE_methodDefinition = 13, RULE_fieldProtection = 14, 
		RULE_fieldDataType = 15, RULE_fieldName = 16, RULE_annotation = 17, RULE_annotationDefinition = 18, 
		RULE_annotationAttributes = 19, RULE_urlAttributes = 20, RULE_annotationData = 21, 
		RULE_annotationType = 22, RULE_protocol = 23, RULE_location = 24, RULE_startQuote = 25, 
		RULE_endQuote = 26, RULE_arguments = 27, RULE_argument = 28, RULE_argumentDataType = 29, 
		RULE_argumentName = 30, RULE_coma = 31, RULE_association = 32, RULE_associationDefinition = 33, 
		RULE_source = 34, RULE_target = 35, RULE_associationType = 36, RULE_associationSourceName = 37, 
		RULE_associationTargetName = 38, RULE_sourceClass = 39, RULE_targetClass = 40;
	public static readonly string[] ruleNames = {
		"code", "blocks", "blockBody", "blockType", "webMemoryClass", "classHead", 
		"superClass", "classBody", "className", "superClassName", "fields", "field", 
		"fieldDefinition", "methodDefinition", "fieldProtection", "fieldDataType", 
		"fieldName", "annotation", "annotationDefinition", "annotationAttributes", 
		"urlAttributes", "annotationData", "annotationType", "protocol", "location", 
		"startQuote", "endQuote", "arguments", "argument", "argumentDataType", 
		"argumentName", "coma", "association", "associationDefinition", "source", 
		"target", "associationType", "associationSourceName", "associationTargetName", 
		"sourceClass", "targetClass"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "'\"'", 
		"'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"PROTECTION", "NAME", "WS", "ANYTHING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public BlocksContext[] blocks() {
			return GetRuleContexts<BlocksContext>();
		}
		public BlocksContext blocks(int i) {
			return GetRuleContext<BlocksContext>(i);
		}
		public AssociationContext[] association() {
			return GetRuleContexts<AssociationContext>();
		}
		public AssociationContext association(int i) {
			return GetRuleContext<AssociationContext>(i);
		}
		public ClassBodyContext[] classBody() {
			return GetRuleContexts<ClassBodyContext>();
		}
		public ClassBodyContext classBody(int i) {
			return GetRuleContext<ClassBodyContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURLYOPEN) | (1L << BRACKETOPEN) | (1L << PROTECTION) | (1L << NAME))) != 0)) {
				{
				State = 85;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PROTECTION:
				case NAME:
					{
					State = 82; blocks();
					}
					break;
				case BRACKETOPEN:
					{
					State = 83; association();
					}
					break;
				case CURLYOPEN:
					{
					State = 84; classBody();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 89;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksContext : ParserRuleContext {
		public BlockTypeContext blockType() {
			return GetRuleContext<BlockTypeContext>(0);
		}
		public BlockBodyContext blockBody() {
			return GetRuleContext<BlockBodyContext>(0);
		}
		public BlocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocks; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlocks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlocks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksContext blocks() {
		BlocksContext _localctx = new BlocksContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_blocks);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; blockType();
			State = 92;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 91; blockBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockBodyContext : ParserRuleContext {
		public WebMemoryClassContext webMemoryClass() {
			return GetRuleContext<WebMemoryClassContext>(0);
		}
		public AssociationContext association() {
			return GetRuleContext<AssociationContext>(0);
		}
		public BlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockBodyContext blockBody() {
		BlockBodyContext _localctx = new BlockBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_blockBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PROTECTION:
			case NAME:
				{
				State = 94; webMemoryClass();
				}
				break;
			case BRACKETOPEN:
				{
				State = 95; association();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public BlockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTypeContext blockType() {
		BlockTypeContext _localctx = new BlockTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_blockType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebMemoryClassContext : ParserRuleContext {
		public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public WebMemoryClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webMemoryClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWebMemoryClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWebMemoryClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebMemoryClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebMemoryClassContext webMemoryClass() {
		WebMemoryClassContext _localctx = new WebMemoryClassContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_webMemoryClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; classHead();
			State = 102;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 101; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext classHead() {
		ClassHeadContext _localctx = new ClassHeadContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; className();
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 105; superClass();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public SuperClassNameContext[] superClassName() {
			return GetRuleContexts<SuperClassNameContext>();
		}
		public SuperClassNameContext superClassName(int i) {
			return GetRuleContext<SuperClassNameContext>(i);
		}
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_superClass);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(COLON);
			State = 112;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 109; superClassName();
					}
					} 
				}
				State = 114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode CURLYOPEN() { return GetToken(LanguageParser.CURLYOPEN, 0); }
		public ITerminalNode CURLYCLOSE() { return GetToken(LanguageParser.CURLYCLOSE, 0); }
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(CURLYOPEN);
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << SQUAREOPEN) | (1L << SEMICOLON) | (1L << PROTECTION) | (1L << NAME))) != 0)) {
				{
				{
				State = 116; fields();
				}
				}
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 122; Match(CURLYCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_className);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public SuperClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClassName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassNameContext superClassName() {
		SuperClassNameContext _localctx = new SuperClassNameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_superClassName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_fields);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 128; field();
				}
				break;
			}
			State = 131; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SQUAREOPEN) {
				{
				{
				State = 133; annotation();
				}
				}
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 139; fieldDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public FieldProtectionContext fieldProtection() {
			return GetRuleContext<FieldProtectionContext>(0);
		}
		public FieldDataTypeContext fieldDataType() {
			return GetRuleContext<FieldDataTypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 141; fieldProtection();
				}
				break;
			}
			State = 145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 144; fieldDataType();
				}
				break;
			}
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PROTECTION || _la==NAME) {
				{
				State = 147; fieldName();
				}
			}

			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BRACKETOPEN) {
				{
				State = 150; methodDefinition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(BRACKETOPEN);
			State = 154; arguments();
			State = 155; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldProtectionContext : ParserRuleContext {
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public FieldProtectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldProtection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldProtection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldProtection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldProtection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldProtectionContext fieldProtection() {
		FieldProtectionContext _localctx = new FieldProtectionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_fieldProtection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(PROTECTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDataTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public FieldDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDataTypeContext fieldDataType() {
		FieldDataTypeContext _localctx = new FieldDataTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_fieldDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fieldName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode SQUAREOPEN() { return GetToken(LanguageParser.SQUAREOPEN, 0); }
		public AnnotationDefinitionContext annotationDefinition() {
			return GetRuleContext<AnnotationDefinitionContext>(0);
		}
		public ITerminalNode SQUARECLOSE() { return GetToken(LanguageParser.SQUARECLOSE, 0); }
		public AnnotationTypeContext annotationType() {
			return GetRuleContext<AnnotationTypeContext>(0);
		}
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public StartQuoteContext startQuote() {
			return GetRuleContext<StartQuoteContext>(0);
		}
		public EndQuoteContext endQuote() {
			return GetRuleContext<EndQuoteContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(SQUAREOPEN);
			State = 165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 164; annotationType();
				}
				break;
			}
			State = 168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BRACKETOPEN) {
				{
				State = 167; Match(BRACKETOPEN);
				}
			}

			State = 171;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 170; startQuote();
				}
				break;
			}
			State = 173; annotationDefinition();
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QUOTE) {
				{
				State = 174; endQuote();
				}
			}

			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BRACKETCLOSE) {
				{
				State = 177; Match(BRACKETCLOSE);
				}
			}

			State = 180; Match(SQUARECLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDefinitionContext : ParserRuleContext {
		public AnnotationAttributesContext annotationAttributes() {
			return GetRuleContext<AnnotationAttributesContext>(0);
		}
		public UrlAttributesContext urlAttributes() {
			return GetRuleContext<UrlAttributesContext>(0);
		}
		public AnnotationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDefinitionContext annotationDefinition() {
		AnnotationDefinitionContext _localctx = new AnnotationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_annotationDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 182; urlAttributes();
				}
				break;
			}
			State = 185; annotationAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributesContext : ParserRuleContext {
		public AnnotationDataContext[] annotationData() {
			return GetRuleContexts<AnnotationDataContext>();
		}
		public AnnotationDataContext annotationData(int i) {
			return GetRuleContext<AnnotationDataContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(LanguageParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(LanguageParser.SEMICOLON, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(LanguageParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(LanguageParser.COMA, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] HASH() { return GetTokens(LanguageParser.HASH); }
		public ITerminalNode HASH(int i) {
			return GetToken(LanguageParser.HASH, i);
		}
		public AnnotationAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributesContext annotationAttributes() {
		AnnotationAttributesContext _localctx = new AnnotationAttributesContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_annotationAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH) | (1L << PROTECTION) | (1L << NAME) | (1L << ANYTHING))) != 0)) {
				{
				State = 193;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PROTECTION:
				case NAME:
				case ANYTHING:
					{
					State = 187; annotationData();
					}
					break;
				case COLON:
					{
					State = 188; Match(COLON);
					}
					break;
				case SEMICOLON:
					{
					State = 189; Match(SEMICOLON);
					}
					break;
				case COMA:
					{
					State = 190; Match(COMA);
					}
					break;
				case DOT:
					{
					State = 191; Match(DOT);
					}
					break;
				case HASH:
					{
					State = 192; Match(HASH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlAttributesContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public ProtocolContext protocol() {
			return GetRuleContext<ProtocolContext>(0);
		}
		public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		public UrlAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrlAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrlAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlAttributesContext urlAttributes() {
		UrlAttributesContext _localctx = new UrlAttributesContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_urlAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PROTECTION || _la==NAME) {
				{
				State = 198; protocol();
				}
			}

			State = 201; Match(COLON);
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PROTECTION || _la==NAME) {
				{
				State = 202; location();
				}
			}

			State = 205; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDataContext : ParserRuleContext {
		public ITerminalNode ANYTHING() { return GetToken(LanguageParser.ANYTHING, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public AnnotationDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationData; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDataContext annotationData() {
		AnnotationDataContext _localctx = new AnnotationDataContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_annotationData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << NAME) | (1L << ANYTHING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public AnnotationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeContext annotationType() {
		AnnotationTypeContext _localctx = new AnnotationTypeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_annotationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ProtocolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProtocol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProtocol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolContext protocol() {
		ProtocolContext _localctx = new ProtocolContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_protocol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public StartQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStartQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStartQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartQuoteContext startQuote() {
		StartQuoteContext _localctx = new StartQuoteContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_startQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public EndQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterEndQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitEndQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndQuoteContext endQuote() {
		EndQuoteContext _localctx = new EndQuoteContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_endQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ComaContext[] coma() {
			return GetRuleContexts<ComaContext>();
		}
		public ComaContext coma(int i) {
			return GetRuleContext<ComaContext>(i);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMA) | (1L << PROTECTION) | (1L << NAME))) != 0)) {
				{
				State = 221;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case COMA:
					{
					State = 219; coma();
					}
					break;
				case PROTECTION:
				case NAME:
					{
					State = 220; argument();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentDataTypeContext argumentDataType() {
			return GetRuleContext<ArgumentDataTypeContext>(0);
		}
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; argumentDataType();
			State = 228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 227; argumentName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDataTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ArgumentDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDataTypeContext argumentDataType() {
		ArgumentDataTypeContext _localctx = new ArgumentDataTypeContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_argumentDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_argumentName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComaContext : ParserRuleContext {
		public ITerminalNode COMA() { return GetToken(LanguageParser.COMA, 0); }
		public ComaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coma; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterComa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitComa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComaContext coma() {
		ComaContext _localctx = new ComaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_coma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public AssociationDefinitionContext associationDefinition() {
			return GetRuleContext<AssociationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(BRACKETOPEN);
			State = 237; associationDefinition();
			State = 238; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDefinitionContext : ParserRuleContext {
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		public ITerminalNode ARROWS() { return GetToken(LanguageParser.ARROWS, 0); }
		public AssociationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDefinitionContext associationDefinition() {
		AssociationDefinitionContext _localctx = new AssociationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_associationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; source();
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARROWS) {
				{
				State = 241; Match(ARROWS);
				}
			}

			State = 244; target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public AssociationSourceNameContext associationSourceName() {
			return GetRuleContext<AssociationSourceNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public SourceClassContext sourceClass() {
			return GetRuleContext<SourceClassContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 246; associationSourceName();
				}
				break;
			}
			State = 250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 249; Match(COLON);
				}
				break;
			}
			State = 253;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 252; sourceClass();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : ParserRuleContext {
		public AssociationTargetNameContext associationTargetName() {
			return GetRuleContext<AssociationTargetNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public TargetClassContext targetClass() {
			return GetRuleContext<TargetClassContext>(0);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 255; associationTargetName();
				}
				break;
			}
			State = 259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 258; Match(COLON);
				}
			}

			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PROTECTION || _la==NAME) {
				{
				State = 261; targetClass();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public AssociationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTypeContext associationType() {
		AssociationTypeContext _localctx = new AssociationTypeContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_associationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public AssociationSourceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceNameContext associationSourceName() {
		AssociationSourceNameContext _localctx = new AssociationSourceNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_associationSourceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public AssociationTargetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetNameContext associationTargetName() {
		AssociationTargetNameContext _localctx = new AssociationTargetNameContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_associationTargetName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public SourceClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSourceClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSourceClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceClassContext sourceClass() {
		SourceClassContext _localctx = new SourceClassContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_sourceClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public TargetClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterTargetClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitTargetClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetClassContext targetClass() {
		TargetClassContext _localctx = new TargetClassContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_targetClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = _input.La(1);
			if ( !(_la==PROTECTION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\x115\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x3\x2\x3\x2\a\x2X\n\x2\f\x2\xE\x2[\v\x2\x3\x3\x3\x3\x5\x3_\n\x3"+
		"\x3\x4\x3\x4\x5\x4\x63\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6i\n\x6\x3\a\x3"+
		"\a\x5\am\n\a\x3\b\x3\b\a\bq\n\b\f\b\xE\bt\v\b\x3\t\x3\t\a\tx\n\t\f\t\xE"+
		"\t{\v\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x5\f\x84\n\f\x3\f\x3\f\x3\r"+
		"\a\r\x89\n\r\f\r\xE\r\x8C\v\r\x3\r\x3\r\x3\xE\x5\xE\x91\n\xE\x3\xE\x5"+
		"\xE\x94\n\xE\x3\xE\x5\xE\x97\n\xE\x3\xE\x5\xE\x9A\n\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13"+
		"\xA8\n\x13\x3\x13\x5\x13\xAB\n\x13\x3\x13\x5\x13\xAE\n\x13\x3\x13\x3\x13"+
		"\x5\x13\xB2\n\x13\x3\x13\x5\x13\xB5\n\x13\x3\x13\x3\x13\x3\x14\x5\x14"+
		"\xBA\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15"+
		"\xC4\n\x15\f\x15\xE\x15\xC7\v\x15\x3\x16\x5\x16\xCA\n\x16\x3\x16\x3\x16"+
		"\x5\x16\xCE\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\xE0"+
		"\n\x1D\f\x1D\xE\x1D\xE3\v\x1D\x3\x1E\x3\x1E\x5\x1E\xE7\n\x1E\x3\x1F\x3"+
		"\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x5#\xF5\n#\x3#\x3#\x3"+
		"$\x5$\xFA\n$\x3$\x5$\xFD\n$\x3$\x5$\x100\n$\x3%\x5%\x103\n%\x3%\x5%\x106"+
		"\n%\x3%\x5%\x109\n%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)\x3*\x3*\x3*\x2\x2"+
		"\x2+\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2\x2\x4\x3\x2\x10\x11\x4\x2\x10\x11\x13\x13\x112\x2Y\x3"+
		"\x2\x2\x2\x4\\\x3\x2\x2\x2\x6\x62\x3\x2\x2\x2\b\x64\x3\x2\x2\x2\n\x66"+
		"\x3\x2\x2\x2\fj\x3\x2\x2\x2\xEn\x3\x2\x2\x2\x10u\x3\x2\x2\x2\x12~\x3\x2"+
		"\x2\x2\x14\x80\x3\x2\x2\x2\x16\x83\x3\x2\x2\x2\x18\x8A\x3\x2\x2\x2\x1A"+
		"\x90\x3\x2\x2\x2\x1C\x9B\x3\x2\x2\x2\x1E\x9F\x3\x2\x2\x2 \xA1\x3\x2\x2"+
		"\x2\"\xA3\x3\x2\x2\x2$\xA5\x3\x2\x2\x2&\xB9\x3\x2\x2\x2(\xC5\x3\x2\x2"+
		"\x2*\xC9\x3\x2\x2\x2,\xD1\x3\x2\x2\x2.\xD3\x3\x2\x2\x2\x30\xD5\x3\x2\x2"+
		"\x2\x32\xD7\x3\x2\x2\x2\x34\xD9\x3\x2\x2\x2\x36\xDB\x3\x2\x2\x2\x38\xE1"+
		"\x3\x2\x2\x2:\xE4\x3\x2\x2\x2<\xE8\x3\x2\x2\x2>\xEA\x3\x2\x2\x2@\xEC\x3"+
		"\x2\x2\x2\x42\xEE\x3\x2\x2\x2\x44\xF2\x3\x2\x2\x2\x46\xF9\x3\x2\x2\x2"+
		"H\x102\x3\x2\x2\x2J\x10A\x3\x2\x2\x2L\x10C\x3\x2\x2\x2N\x10E\x3\x2\x2"+
		"\x2P\x110\x3\x2\x2\x2R\x112\x3\x2\x2\x2TX\x5\x4\x3\x2UX\x5\x42\"\x2VX"+
		"\x5\x10\t\x2WT\x3\x2\x2\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2X[\x3\x2\x2\x2Y"+
		"W\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\x3\x3\x2\x2\x2[Y\x3\x2\x2\x2\\^\x5\b\x5\x2"+
		"]_\x5\x6\x4\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_\x5\x3\x2\x2\x2`\x63\x5\n\x6"+
		"\x2\x61\x63\x5\x42\"\x2\x62`\x3\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\a\x3"+
		"\x2\x2\x2\x64\x65\t\x2\x2\x2\x65\t\x3\x2\x2\x2\x66h\x5\f\a\x2gi\x5\x10"+
		"\t\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2i\v\x3\x2\x2\x2jl\x5\x12\n\x2km\x5\xE"+
		"\b\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2m\r\x3\x2\x2\x2nr\a\n\x2\x2oq\x5\x14"+
		"\v\x2po\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2s\xF\x3\x2"+
		"\x2\x2tr\x3\x2\x2\x2uy\a\x3\x2\x2vx\x5\x16\f\x2wv\x3\x2\x2\x2x{\x3\x2"+
		"\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2\x2\x2|}\a\x4"+
		"\x2\x2}\x11\x3\x2\x2\x2~\x7F\t\x2\x2\x2\x7F\x13\x3\x2\x2\x2\x80\x81\t"+
		"\x2\x2\x2\x81\x15\x3\x2\x2\x2\x82\x84\x5\x18\r\x2\x83\x82\x3\x2\x2\x2"+
		"\x83\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\a\t\x2\x2\x86\x17\x3"+
		"\x2\x2\x2\x87\x89\x5$\x13\x2\x88\x87\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A"+
		"\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8D\x3\x2\x2\x2\x8C\x8A\x3\x2"+
		"\x2\x2\x8D\x8E\x5\x1A\xE\x2\x8E\x19\x3\x2\x2\x2\x8F\x91\x5\x1E\x10\x2"+
		"\x90\x8F\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92\x94\x5"+
		" \x11\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95"+
		"\x97\x5\"\x12\x2\x96\x95\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x99\x3\x2"+
		"\x2\x2\x98\x9A\x5\x1C\xF\x2\x99\x98\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A"+
		"\x1B\x3\x2\x2\x2\x9B\x9C\a\x5\x2\x2\x9C\x9D\x5\x38\x1D\x2\x9D\x9E\a\x6"+
		"\x2\x2\x9E\x1D\x3\x2\x2\x2\x9F\xA0\a\x10\x2\x2\xA0\x1F\x3\x2\x2\x2\xA1"+
		"\xA2\t\x2\x2\x2\xA2!\x3\x2\x2\x2\xA3\xA4\t\x2\x2\x2\xA4#\x3\x2\x2\x2\xA5"+
		"\xA7\a\a\x2\x2\xA6\xA8\x5.\x18\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2"+
		"\x2\xA8\xAA\x3\x2\x2\x2\xA9\xAB\a\x5\x2\x2\xAA\xA9\x3\x2\x2\x2\xAA\xAB"+
		"\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAE\x5\x34\x1B\x2\xAD\xAC\x3\x2\x2"+
		"\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x5&\x14\x2\xB0\xB2"+
		"\x5\x36\x1C\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2"+
		"\x2\xB3\xB5\a\x6\x2\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6"+
		"\x3\x2\x2\x2\xB6\xB7\a\b\x2\x2\xB7%\x3\x2\x2\x2\xB8\xBA\x5*\x16\x2\xB9"+
		"\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x5(\x15"+
		"\x2\xBC\'\x3\x2\x2\x2\xBD\xC4\x5,\x17\x2\xBE\xC4\a\n\x2\x2\xBF\xC4\a\t"+
		"\x2\x2\xC0\xC4\a\r\x2\x2\xC1\xC4\a\f\x2\x2\xC2\xC4\a\xE\x2\x2\xC3\xBD"+
		"\x3\x2\x2\x2\xC3\xBE\x3\x2\x2\x2\xC3\xBF\x3\x2\x2\x2\xC3\xC0\x3\x2\x2"+
		"\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC2\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3"+
		"\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6)\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2"+
		"\xC8\xCA\x5\x30\x19\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB"+
		"\x3\x2\x2\x2\xCB\xCD\a\n\x2\x2\xCC\xCE\x5\x32\x1A\x2\xCD\xCC\x3\x2\x2"+
		"\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\a\n\x2\x2\xD0+\x3"+
		"\x2\x2\x2\xD1\xD2\t\x3\x2\x2\xD2-\x3\x2\x2\x2\xD3\xD4\t\x2\x2\x2\xD4/"+
		"\x3\x2\x2\x2\xD5\xD6\t\x2\x2\x2\xD6\x31\x3\x2\x2\x2\xD7\xD8\t\x2\x2\x2"+
		"\xD8\x33\x3\x2\x2\x2\xD9\xDA\a\v\x2\x2\xDA\x35\x3\x2\x2\x2\xDB\xDC\a\v"+
		"\x2\x2\xDC\x37\x3\x2\x2\x2\xDD\xE0\x5@!\x2\xDE\xE0\x5:\x1E\x2\xDF\xDD"+
		"\x3\x2\x2\x2\xDF\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2"+
		"\x2\xE1\xE2\x3\x2\x2\x2\xE2\x39\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE6"+
		"\x5<\x1F\x2\xE5\xE7\x5> \x2\xE6\xE5\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7"+
		";\x3\x2\x2\x2\xE8\xE9\t\x2\x2\x2\xE9=\x3\x2\x2\x2\xEA\xEB\t\x2\x2\x2\xEB"+
		"?\x3\x2\x2\x2\xEC\xED\a\r\x2\x2\xED\x41\x3\x2\x2\x2\xEE\xEF\a\x5\x2\x2"+
		"\xEF\xF0\x5\x44#\x2\xF0\xF1\a\x6\x2\x2\xF1\x43\x3\x2\x2\x2\xF2\xF4\x5"+
		"\x46$\x2\xF3\xF5\a\xF\x2\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5"+
		"\xF6\x3\x2\x2\x2\xF6\xF7\x5H%\x2\xF7\x45\x3\x2\x2\x2\xF8\xFA\x5L\'\x2"+
		"\xF9\xF8\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xFD\a"+
		"\n\x2\x2\xFC\xFB\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE"+
		"\x100\x5P)\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100G\x3\x2\x2"+
		"\x2\x101\x103\x5N(\x2\x102\x101\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103"+
		"\x105\x3\x2\x2\x2\x104\x106\a\n\x2\x2\x105\x104\x3\x2\x2\x2\x105\x106"+
		"\x3\x2\x2\x2\x106\x108\x3\x2\x2\x2\x107\x109\x5R*\x2\x108\x107\x3\x2\x2"+
		"\x2\x108\x109\x3\x2\x2\x2\x109I\x3\x2\x2\x2\x10A\x10B\t\x2\x2\x2\x10B"+
		"K\x3\x2\x2\x2\x10C\x10D\t\x2\x2\x2\x10DM\x3\x2\x2\x2\x10E\x10F\t\x2\x2"+
		"\x2\x10FO\x3\x2\x2\x2\x110\x111\t\x2\x2\x2\x111Q\x3\x2\x2\x2\x112\x113"+
		"\t\x2\x2\x2\x113S\x3\x2\x2\x2$WY^\x62hlry\x83\x8A\x90\x93\x96\x99\xA7"+
		"\xAA\xAD\xB1\xB4\xB9\xC3\xC5\xC9\xCD\xDF\xE1\xE6\xF4\xF9\xFC\xFF\x102"+
		"\x105\x108";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR
