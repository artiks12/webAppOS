//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Artis\Documents\GitHub\webAppOS\src\ANTLR\ANTLR\Grammar\LanguageParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	public const int
		CURLYOPEN=1, CURLYCLOSE=2, BRACKETOPEN=3, BRACKETCLOSE=4, SQUAREOPEN=5, 
		SQUARECLOSE=6, SEMICOLON=7, COLON=8, QUOTE=9, DOT=10, COMA=11, HASH=12, 
		ARROWS=13, PROTECTION=14, BLOCKTYPE=15, DATATYPE=16, NAME=17, WS=18, ANYTHING=19;
	public const int
		RULE_code = 0, RULE_blocks = 1, RULE_blockBody = 2, RULE_blockType = 3, 
		RULE_association = 4, RULE_associationDefinition = 5, RULE_associationSource = 6, 
		RULE_associationTarget = 7, RULE_associationSourceName = 8, RULE_associationTargetName = 9, 
		RULE_associationSourceClass = 10, RULE_associationTargetClass = 11, RULE_webMemoryClass = 12, 
		RULE_classHead = 13, RULE_classBody = 14, RULE_superClass = 15, RULE_fields = 16, 
		RULE_field = 17, RULE_className = 18, RULE_superClassName = 19, RULE_annotation = 20, 
		RULE_annotationContent = 21, RULE_annotationBody = 22, RULE_annotationDefinition = 23, 
		RULE_annotationValue = 24, RULE_urlAttributes = 25, RULE_annotationAttributes = 26, 
		RULE_annotationData = 27, RULE_annotationType = 28, RULE_annotationSeperator = 29, 
		RULE_protocol = 30, RULE_location = 31, RULE_startQuote = 32, RULE_endQuote = 33, 
		RULE_fieldDefinition = 34, RULE_variableDefinition = 35, RULE_methodDefinition = 36, 
		RULE_variable = 37, RULE_arguments = 38, RULE_argument = 39, RULE_fieldProtection = 40, 
		RULE_fieldDataType = 41, RULE_fieldName = 42, RULE_argumentDataType = 43, 
		RULE_argumentName = 44, RULE_coma = 45;
	public static readonly string[] ruleNames = {
		"code", "blocks", "blockBody", "blockType", "association", "associationDefinition", 
		"associationSource", "associationTarget", "associationSourceName", "associationTargetName", 
		"associationSourceClass", "associationTargetClass", "webMemoryClass", 
		"classHead", "classBody", "superClass", "fields", "field", "className", 
		"superClassName", "annotation", "annotationContent", "annotationBody", 
		"annotationDefinition", "annotationValue", "urlAttributes", "annotationAttributes", 
		"annotationData", "annotationType", "annotationSeperator", "protocol", 
		"location", "startQuote", "endQuote", "fieldDefinition", "variableDefinition", 
		"methodDefinition", "variable", "arguments", "argument", "fieldProtection", 
		"fieldDataType", "fieldName", "argumentDataType", "argumentName", "coma"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "'\"'", 
		"'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"PROTECTION", "BLOCKTYPE", "DATATYPE", "NAME", "WS", "ANYTHING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public BlocksContext[] blocks() {
			return GetRuleContexts<BlocksContext>();
		}
		public BlocksContext blocks(int i) {
			return GetRuleContext<BlocksContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURLYOPEN) | (1L << BRACKETOPEN) | (1L << COLON) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				{
				State = 92; blocks();
				}
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksContext : ParserRuleContext {
		public BlockBodyContext blockBody() {
			return GetRuleContext<BlockBodyContext>(0);
		}
		public BlockTypeContext blockType() {
			return GetRuleContext<BlockTypeContext>(0);
		}
		public BlocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocks; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlocks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlocks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksContext blocks() {
		BlocksContext _localctx = new BlocksContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_blocks);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE))) != 0)) {
					{
					State = 98; blockType();
					}
				}

				State = 101; blockBody();
				}
				break;

			case 2:
				{
				State = 102; blockType();
				State = 104;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 103; blockBody();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockBodyContext : ParserRuleContext {
		public WebMemoryClassContext webMemoryClass() {
			return GetRuleContext<WebMemoryClassContext>(0);
		}
		public AssociationContext association() {
			return GetRuleContext<AssociationContext>(0);
		}
		public BlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockBodyContext blockBody() {
		BlockBodyContext _localctx = new BlockBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_blockBody);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CURLYOPEN:
			case COLON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; webMemoryClass();
				}
				break;
			case BRACKETOPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; association();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTypeContext : ParserRuleContext {
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public BlockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTypeContext blockType() {
		BlockTypeContext _localctx = new BlockTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_blockType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public AssociationDefinitionContext associationDefinition() {
			return GetRuleContext<AssociationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(BRACKETOPEN);
			State = 115; associationDefinition();
			State = 116; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDefinitionContext : ParserRuleContext {
		public AssociationSourceContext associationSource() {
			return GetRuleContext<AssociationSourceContext>(0);
		}
		public AssociationTargetContext associationTarget() {
			return GetRuleContext<AssociationTargetContext>(0);
		}
		public ITerminalNode ARROWS() { return GetToken(LanguageParser.ARROWS, 0); }
		public AssociationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDefinitionContext associationDefinition() {
		AssociationDefinitionContext _localctx = new AssociationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_associationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; associationSource();
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARROWS) {
				{
				State = 119; Match(ARROWS);
				}
			}

			State = 122; associationTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceContext : ParserRuleContext {
		public AssociationSourceNameContext associationSourceName() {
			return GetRuleContext<AssociationSourceNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public AssociationSourceClassContext associationSourceClass() {
			return GetRuleContext<AssociationSourceClassContext>(0);
		}
		public AssociationSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceContext associationSource() {
		AssociationSourceContext _localctx = new AssociationSourceContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_associationSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 124; associationSourceName();
				}
				break;
			}
			State = 128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 127; Match(COLON);
				}
				break;
			}
			State = 131;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 130; associationSourceClass();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetContext : ParserRuleContext {
		public AssociationTargetNameContext associationTargetName() {
			return GetRuleContext<AssociationTargetNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public AssociationTargetClassContext associationTargetClass() {
			return GetRuleContext<AssociationTargetClassContext>(0);
		}
		public AssociationTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetContext associationTarget() {
		AssociationTargetContext _localctx = new AssociationTargetContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_associationTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 133; associationTargetName();
				}
				break;
			}
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 136; Match(COLON);
				}
			}

			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 139; associationTargetClass();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationSourceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceNameContext associationSourceName() {
		AssociationSourceNameContext _localctx = new AssociationSourceNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_associationSourceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationTargetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetNameContext associationTargetName() {
		AssociationTargetNameContext _localctx = new AssociationTargetNameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_associationTargetName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationSourceClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceClassContext associationSourceClass() {
		AssociationSourceClassContext _localctx = new AssociationSourceClassContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_associationSourceClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationTargetClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetClassContext associationTargetClass() {
		AssociationTargetClassContext _localctx = new AssociationTargetClassContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_associationTargetClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebMemoryClassContext : ParserRuleContext {
		public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public WebMemoryClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webMemoryClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWebMemoryClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWebMemoryClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebMemoryClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebMemoryClassContext webMemoryClass() {
		WebMemoryClassContext _localctx = new WebMemoryClassContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_webMemoryClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 150; classHead();
				State = 152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 151; classBody();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON || _la==NAME) {
					{
					State = 154; classHead();
					}
				}

				State = 157; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext classHead() {
		ClassHeadContext _localctx = new ClassHeadContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_classHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 160; className();
				State = 162;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 161; superClass();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NAME) {
					{
					State = 164; className();
					}
				}

				State = 167; superClass();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode CURLYOPEN() { return GetToken(LanguageParser.CURLYOPEN, 0); }
		public ITerminalNode CURLYCLOSE() { return GetToken(LanguageParser.CURLYCLOSE, 0); }
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(CURLYOPEN);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << SQUAREOPEN) | (1L << SEMICOLON) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				{
				State = 171; fields();
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 177; Match(CURLYCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public SuperClassNameContext superClassName() {
			return GetRuleContext<SuperClassNameContext>(0);
		}
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_superClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(COLON);
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 180; superClassName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << SQUAREOPEN) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 183; field();
					}
				}

				State = 186; Match(SEMICOLON);
				}
				break;

			case 2:
				{
				State = 187; field();
				State = 189;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 188; Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_field);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SQUAREOPEN) {
					{
					{
					State = 193; annotation();
					}
					}
					State = 198;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 199; fieldDefinition();
				}
				break;

			case 2:
				{
				State = 201;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 200; annotation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 203;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 206;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 205; fieldDefinition();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public SuperClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClassName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassNameContext superClassName() {
		SuperClassNameContext _localctx = new SuperClassNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_superClassName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode SQUAREOPEN() { return GetToken(LanguageParser.SQUAREOPEN, 0); }
		public ITerminalNode SQUARECLOSE() { return GetToken(LanguageParser.SQUARECLOSE, 0); }
		public AnnotationContentContext annotationContent() {
			return GetRuleContext<AnnotationContentContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(SQUAREOPEN);
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 215; annotationContent();
				}
			}

			State = 218; Match(SQUARECLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContentContext : ParserRuleContext {
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationTypeContext annotationType() {
			return GetRuleContext<AnnotationTypeContext>(0);
		}
		public AnnotationContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContentContext annotationContent() {
		AnnotationContentContext _localctx = new AnnotationContentContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_annotationContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 220; annotationType();
					}
				}

				State = 223; annotationBody();
				}
				break;

			case 2:
				{
				State = 224; annotationType();
				State = 226;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BRACKETOPEN) {
					{
					State = 225; annotationBody();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public AnnotationDefinitionContext annotationDefinition() {
			return GetRuleContext<AnnotationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(BRACKETOPEN);
			State = 231; annotationDefinition();
			State = 232; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDefinitionContext : ParserRuleContext {
		public StartQuoteContext startQuote() {
			return GetRuleContext<StartQuoteContext>(0);
		}
		public AnnotationValueContext annotationValue() {
			return GetRuleContext<AnnotationValueContext>(0);
		}
		public EndQuoteContext endQuote() {
			return GetRuleContext<EndQuoteContext>(0);
		}
		public AnnotationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDefinitionContext annotationDefinition() {
		AnnotationDefinitionContext _localctx = new AnnotationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_annotationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 234; startQuote();
				}
				break;
			}
			State = 238;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0)) {
				{
				State = 237; annotationValue();
				}
			}

			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QUOTE) {
				{
				State = 240; endQuote();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationValueContext : ParserRuleContext {
		public AnnotationAttributesContext annotationAttributes() {
			return GetRuleContext<AnnotationAttributesContext>(0);
		}
		public UrlAttributesContext urlAttributes() {
			return GetRuleContext<UrlAttributesContext>(0);
		}
		public AnnotationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationValueContext annotationValue() {
		AnnotationValueContext _localctx = new AnnotationValueContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_annotationValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 243; urlAttributes();
				}
				break;
			}
			State = 246; annotationAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlAttributesContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public ProtocolContext protocol() {
			return GetRuleContext<ProtocolContext>(0);
		}
		public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		public UrlAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrlAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrlAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlAttributesContext urlAttributes() {
		UrlAttributesContext _localctx = new UrlAttributesContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_urlAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 248; protocol();
				}
			}

			State = 251; Match(COLON);
			State = 253;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 252; location();
				}
			}

			State = 255; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributesContext : ParserRuleContext {
		public AnnotationDataContext[] annotationData() {
			return GetRuleContexts<AnnotationDataContext>();
		}
		public AnnotationDataContext annotationData(int i) {
			return GetRuleContext<AnnotationDataContext>(i);
		}
		public AnnotationSeperatorContext[] annotationSeperator() {
			return GetRuleContexts<AnnotationSeperatorContext>();
		}
		public AnnotationSeperatorContext annotationSeperator(int i) {
			return GetRuleContext<AnnotationSeperatorContext>(i);
		}
		public AnnotationAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributesContext annotationAttributes() {
		AnnotationAttributesContext _localctx = new AnnotationAttributesContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_annotationAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 259;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PROTECTION:
				case BLOCKTYPE:
				case DATATYPE:
				case NAME:
				case ANYTHING:
					{
					State = 257; annotationData();
					}
					break;
				case SEMICOLON:
				case COLON:
				case DOT:
				case COMA:
				case HASH:
					{
					State = 258; annotationSeperator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 261;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDataContext : ParserRuleContext {
		public ITerminalNode ANYTHING() { return GetToken(LanguageParser.ANYTHING, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public AnnotationDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationData; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDataContext annotationData() {
		AnnotationDataContext _localctx = new AnnotationDataContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_annotationData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public AnnotationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeContext annotationType() {
		AnnotationTypeContext _localctx = new AnnotationTypeContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_annotationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationSeperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ITerminalNode COMA() { return GetToken(LanguageParser.COMA, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode HASH() { return GetToken(LanguageParser.HASH, 0); }
		public AnnotationSeperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationSeperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationSeperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationSeperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationSeperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationSeperatorContext annotationSeperator() {
		AnnotationSeperatorContext _localctx = new AnnotationSeperatorContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_annotationSeperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ProtocolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProtocol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProtocol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolContext protocol() {
		ProtocolContext _localctx = new ProtocolContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_protocol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public StartQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStartQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStartQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartQuoteContext startQuote() {
		StartQuoteContext _localctx = new StartQuoteContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_startQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public EndQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterEndQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitEndQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndQuoteContext endQuote() {
		EndQuoteContext _localctx = new EndQuoteContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_endQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public VariableDefinitionContext variableDefinition() {
			return GetRuleContext<VariableDefinitionContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 277; variableDefinition();
				State = 279;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 278; methodDefinition();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 282;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 281; variableDefinition();
					}
				}

				State = 284; methodDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FieldProtectionContext fieldProtection() {
			return GetRuleContext<FieldProtectionContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 288;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROTECTION) {
					{
					State = 287; fieldProtection();
					}
				}

				State = 290; variable();
				}
				break;

			case 2:
				{
				State = 291; fieldProtection();
				State = 293;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 292; variable();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(BRACKETOPEN);
			State = 298; arguments();
			State = 299; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public FieldDataTypeContext fieldDataType() {
			return GetRuleContext<FieldDataTypeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BLOCKTYPE || _la==DATATYPE) {
					{
					State = 301; fieldDataType();
					}
				}

				State = 304; fieldName();
				}
				break;

			case 2:
				{
				State = 305; fieldDataType();
				State = 307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 306; fieldName();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ComaContext[] coma() {
			return GetRuleContexts<ComaContext>();
		}
		public ComaContext coma(int i) {
			return GetRuleContext<ComaContext>(i);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMA) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 313;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case COMA:
					{
					State = 311; coma();
					}
					break;
				case PROTECTION:
				case BLOCKTYPE:
				case DATATYPE:
				case NAME:
					{
					State = 312; argument();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public ArgumentDataTypeContext argumentDataType() {
			return GetRuleContext<ArgumentDataTypeContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 319;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE))) != 0)) {
					{
					State = 318; argumentDataType();
					}
				}

				State = 321; argumentName();
				}
				break;

			case 2:
				{
				State = 322; argumentDataType();
				State = 324;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 323; argumentName();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldProtectionContext : ParserRuleContext {
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public FieldProtectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldProtection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldProtection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldProtection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldProtection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldProtectionContext fieldProtection() {
		FieldProtectionContext _localctx = new FieldProtectionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_fieldProtection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(PROTECTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDataTypeContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public FieldDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDataTypeContext fieldDataType() {
		FieldDataTypeContext _localctx = new FieldDataTypeContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_fieldDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = _input.La(1);
			if ( !(_la==BLOCKTYPE || _la==DATATYPE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDataTypeContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ArgumentDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDataTypeContext argumentDataType() {
		ArgumentDataTypeContext _localctx = new ArgumentDataTypeContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_argumentDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComaContext : ParserRuleContext {
		public ITerminalNode COMA() { return GetToken(LanguageParser.COMA, 0); }
		public ComaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coma; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterComa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitComa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComaContext coma() {
		ComaContext _localctx = new ComaContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_coma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15\x157\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x3\x2\a\x2`\n\x2\f\x2\xE\x2\x63\v"+
		"\x2\x3\x3\x5\x3\x66\n\x3\x3\x3\x3\x3\x3\x3\x5\x3k\n\x3\x5\x3m\n\x3\x3"+
		"\x4\x3\x4\x5\x4q\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x5"+
		"\a{\n\a\x3\a\x3\a\x3\b\x5\b\x80\n\b\x3\b\x5\b\x83\n\b\x3\b\x5\b\x86\n"+
		"\b\x3\t\x5\t\x89\n\t\x3\t\x5\t\x8C\n\t\x3\t\x5\t\x8F\n\t\x3\n\x3\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x5\xE\x9B\n\xE\x3\xE\x5\xE\x9E"+
		"\n\xE\x3\xE\x5\xE\xA1\n\xE\x3\xF\x3\xF\x5\xF\xA5\n\xF\x3\xF\x5\xF\xA8"+
		"\n\xF\x3\xF\x5\xF\xAB\n\xF\x3\x10\x3\x10\a\x10\xAF\n\x10\f\x10\xE\x10"+
		"\xB2\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xB8\n\x11\x3\x12\x5\x12"+
		"\xBB\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\xC0\n\x12\x5\x12\xC2\n\x12\x3\x13"+
		"\a\x13\xC5\n\x13\f\x13\xE\x13\xC8\v\x13\x3\x13\x3\x13\x6\x13\xCC\n\x13"+
		"\r\x13\xE\x13\xCD\x3\x13\x5\x13\xD1\n\x13\x5\x13\xD3\n\x13\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\xDB\n\x16\x3\x16\x3\x16\x3\x17\x5"+
		"\x17\xE0\n\x17\x3\x17\x3\x17\x3\x17\x5\x17\xE5\n\x17\x5\x17\xE7\n\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x5\x19\xEE\n\x19\x3\x19\x5\x19\xF1"+
		"\n\x19\x3\x19\x5\x19\xF4\n\x19\x3\x1A\x5\x1A\xF7\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x5\x1B\xFC\n\x1B\x3\x1B\x3\x1B\x5\x1B\x100\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x6\x1C\x106\n\x1C\r\x1C\xE\x1C\x107\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x5$\x11A"+
		"\n$\x3$\x5$\x11D\n$\x3$\x5$\x120\n$\x3%\x5%\x123\n%\x3%\x3%\x3%\x5%\x128"+
		"\n%\x5%\x12A\n%\x3&\x3&\x3&\x3&\x3\'\x5\'\x131\n\'\x3\'\x3\'\x3\'\x5\'"+
		"\x136\n\'\x5\'\x138\n\'\x3(\x3(\a(\x13C\n(\f(\xE(\x13F\v(\x3)\x5)\x142"+
		"\n)\x3)\x3)\x3)\x5)\x147\n)\x5)\x149\n)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3"+
		"-\x3.\x3.\x3/\x3/\x3/\x2\x2\x2\x30\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"\x2\a\x3\x2\x10\x12\x3\x2\x10\x13\x4\x2\x10\x13\x15\x15\x4\x2\t\n\f\xE"+
		"\x3\x2\x11\x12\x15D\x2\x61\x3\x2\x2\x2\x4l\x3\x2\x2\x2\x6p\x3\x2\x2\x2"+
		"\br\x3\x2\x2\x2\nt\x3\x2\x2\x2\fx\x3\x2\x2\x2\xE\x7F\x3\x2\x2\x2\x10\x88"+
		"\x3\x2\x2\x2\x12\x90\x3\x2\x2\x2\x14\x92\x3\x2\x2\x2\x16\x94\x3\x2\x2"+
		"\x2\x18\x96\x3\x2\x2\x2\x1A\xA0\x3\x2\x2\x2\x1C\xAA\x3\x2\x2\x2\x1E\xAC"+
		"\x3\x2\x2\x2 \xB5\x3\x2\x2\x2\"\xC1\x3\x2\x2\x2$\xD2\x3\x2\x2\x2&\xD4"+
		"\x3\x2\x2\x2(\xD6\x3\x2\x2\x2*\xD8\x3\x2\x2\x2,\xE6\x3\x2\x2\x2.\xE8\x3"+
		"\x2\x2\x2\x30\xED\x3\x2\x2\x2\x32\xF6\x3\x2\x2\x2\x34\xFB\x3\x2\x2\x2"+
		"\x36\x105\x3\x2\x2\x2\x38\x109\x3\x2\x2\x2:\x10B\x3\x2\x2\x2<\x10D\x3"+
		"\x2\x2\x2>\x10F\x3\x2\x2\x2@\x111\x3\x2\x2\x2\x42\x113\x3\x2\x2\x2\x44"+
		"\x115\x3\x2\x2\x2\x46\x11F\x3\x2\x2\x2H\x129\x3\x2\x2\x2J\x12B\x3\x2\x2"+
		"\x2L\x137\x3\x2\x2\x2N\x13D\x3\x2\x2\x2P\x148\x3\x2\x2\x2R\x14A\x3\x2"+
		"\x2\x2T\x14C\x3\x2\x2\x2V\x14E\x3\x2\x2\x2X\x150\x3\x2\x2\x2Z\x152\x3"+
		"\x2\x2\x2\\\x154\x3\x2\x2\x2^`\x5\x4\x3\x2_^\x3\x2\x2\x2`\x63\x3\x2\x2"+
		"\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x3\x3\x2\x2\x2\x63\x61\x3"+
		"\x2\x2\x2\x64\x66\x5\b\x5\x2\x65\x64\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"g\x3\x2\x2\x2gm\x5\x6\x4\x2hj\x5\b\x5\x2ik\x5\x6\x4\x2ji\x3\x2\x2\x2j"+
		"k\x3\x2\x2\x2km\x3\x2\x2\x2l\x65\x3\x2\x2\x2lh\x3\x2\x2\x2m\x5\x3\x2\x2"+
		"\x2nq\x5\x1A\xE\x2oq\x5\n\x6\x2pn\x3\x2\x2\x2po\x3\x2\x2\x2q\a\x3\x2\x2"+
		"\x2rs\t\x2\x2\x2s\t\x3\x2\x2\x2tu\a\x5\x2\x2uv\x5\f\a\x2vw\a\x6\x2\x2"+
		"w\v\x3\x2\x2\x2xz\x5\xE\b\x2y{\a\xF\x2\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2"+
		"{|\x3\x2\x2\x2|}\x5\x10\t\x2}\r\x3\x2\x2\x2~\x80\x5\x12\n\x2\x7F~\x3\x2"+
		"\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x83\a\n\x2\x2\x82\x81"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x86\x5\x16\f"+
		"\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\xF\x3\x2\x2\x2\x87\x89"+
		"\x5\x14\v\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2"+
		"\x2\x8A\x8C\a\n\x2\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E"+
		"\x3\x2\x2\x2\x8D\x8F\x5\x18\r\x2\x8E\x8D\x3\x2\x2\x2\x8E\x8F\x3\x2\x2"+
		"\x2\x8F\x11\x3\x2\x2\x2\x90\x91\t\x3\x2\x2\x91\x13\x3\x2\x2\x2\x92\x93"+
		"\t\x3\x2\x2\x93\x15\x3\x2\x2\x2\x94\x95\t\x3\x2\x2\x95\x17\x3\x2\x2\x2"+
		"\x96\x97\t\x3\x2\x2\x97\x19\x3\x2\x2\x2\x98\x9A\x5\x1C\xF\x2\x99\x9B\x5"+
		"\x1E\x10\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\xA1\x3\x2\x2\x2"+
		"\x9C\x9E\x5\x1C\xF\x2\x9D\x9C\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F"+
		"\x3\x2\x2\x2\x9F\xA1\x5\x1E\x10\x2\xA0\x98\x3\x2\x2\x2\xA0\x9D\x3\x2\x2"+
		"\x2\xA1\x1B\x3\x2\x2\x2\xA2\xA4\x5&\x14\x2\xA3\xA5\x5 \x11\x2\xA4\xA3"+
		"\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xAB\x3\x2\x2\x2\xA6\xA8\x5&\x14\x2"+
		"\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x5"+
		" \x11\x2\xAA\xA2\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAB\x1D\x3\x2\x2\x2\xAC"+
		"\xB0\a\x3\x2\x2\xAD\xAF\x5\"\x12\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2"+
		"\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2"+
		"\xB0\x3\x2\x2\x2\xB3\xB4\a\x4\x2\x2\xB4\x1F\x3\x2\x2\x2\xB5\xB7\a\n\x2"+
		"\x2\xB6\xB8\x5(\x15\x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8!\x3"+
		"\x2\x2\x2\xB9\xBB\x5$\x13\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB"+
		"\xBC\x3\x2\x2\x2\xBC\xC2\a\t\x2\x2\xBD\xBF\x5$\x13\x2\xBE\xC0\a\t\x2\x2"+
		"\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBA\x3"+
		"\x2\x2\x2\xC1\xBD\x3\x2\x2\x2\xC2#\x3\x2\x2\x2\xC3\xC5\x5*\x16\x2\xC4"+
		"\xC3\x3\x2\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2"+
		"\x2\x2\xC7\xC9\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xD3\x5\x46$\x2\xCA"+
		"\xCC\x5*\x16\x2\xCB\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCB\x3\x2"+
		"\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xD1\x5\x46$\x2\xD0"+
		"\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3\x3\x2\x2\x2\xD2\xC6\x3\x2"+
		"\x2\x2\xD2\xCB\x3\x2\x2\x2\xD3%\x3\x2\x2\x2\xD4\xD5\a\x13\x2\x2\xD5\'"+
		"\x3\x2\x2\x2\xD6\xD7\a\x13\x2\x2\xD7)\x3\x2\x2\x2\xD8\xDA\a\a\x2\x2\xD9"+
		"\xDB\x5,\x17\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\x3\x2"+
		"\x2\x2\xDC\xDD\a\b\x2\x2\xDD+\x3\x2\x2\x2\xDE\xE0\x5:\x1E\x2\xDF\xDE\x3"+
		"\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE7\x5.\x18\x2\xE2"+
		"\xE4\x5:\x1E\x2\xE3\xE5\x5.\x18\x2\xE4\xE3\x3\x2\x2\x2\xE4\xE5\x3\x2\x2"+
		"\x2\xE5\xE7\x3\x2\x2\x2\xE6\xDF\x3\x2\x2\x2\xE6\xE2\x3\x2\x2\x2\xE7-\x3"+
		"\x2\x2\x2\xE8\xE9\a\x5\x2\x2\xE9\xEA\x5\x30\x19\x2\xEA\xEB\a\x6\x2\x2"+
		"\xEB/\x3\x2\x2\x2\xEC\xEE\x5\x42\"\x2\xED\xEC\x3\x2\x2\x2\xED\xEE\x3\x2"+
		"\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xF1\x5\x32\x1A\x2\xF0\xEF\x3\x2\x2\x2\xF0"+
		"\xF1\x3\x2\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xF4\x5\x44#\x2\xF3\xF2\x3\x2"+
		"\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\x31\x3\x2\x2\x2\xF5\xF7\x5\x34\x1B\x2\xF6"+
		"\xF5\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x5\x36"+
		"\x1C\x2\xF9\x33\x3\x2\x2\x2\xFA\xFC\x5> \x2\xFB\xFA\x3\x2\x2\x2\xFB\xFC"+
		"\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\a\n\x2\x2\xFE\x100\x5@!\x2\xFF"+
		"\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x102"+
		"\a\n\x2\x2\x102\x35\x3\x2\x2\x2\x103\x106\x5\x38\x1D\x2\x104\x106\x5<"+
		"\x1F\x2\x105\x103\x3\x2\x2\x2\x105\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2"+
		"\x2\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x37\x3\x2\x2\x2\x109"+
		"\x10A\t\x4\x2\x2\x10A\x39\x3\x2\x2\x2\x10B\x10C\t\x3\x2\x2\x10C;\x3\x2"+
		"\x2\x2\x10D\x10E\t\x5\x2\x2\x10E=\x3\x2\x2\x2\x10F\x110\t\x3\x2\x2\x110"+
		"?\x3\x2\x2\x2\x111\x112\t\x3\x2\x2\x112\x41\x3\x2\x2\x2\x113\x114\a\v"+
		"\x2\x2\x114\x43\x3\x2\x2\x2\x115\x116\a\v\x2\x2\x116\x45\x3\x2\x2\x2\x117"+
		"\x119\x5H%\x2\x118\x11A\x5J&\x2\x119\x118\x3\x2\x2\x2\x119\x11A\x3\x2"+
		"\x2\x2\x11A\x120\x3\x2\x2\x2\x11B\x11D\x5H%\x2\x11C\x11B\x3\x2\x2\x2\x11C"+
		"\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x120\x5J&\x2\x11F\x117\x3"+
		"\x2\x2\x2\x11F\x11C\x3\x2\x2\x2\x120G\x3\x2\x2\x2\x121\x123\x5R*\x2\x122"+
		"\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x12A"+
		"\x5L\'\x2\x125\x127\x5R*\x2\x126\x128\x5L\'\x2\x127\x126\x3\x2\x2\x2\x127"+
		"\x128\x3\x2\x2\x2\x128\x12A\x3\x2\x2\x2\x129\x122\x3\x2\x2\x2\x129\x125"+
		"\x3\x2\x2\x2\x12AI\x3\x2\x2\x2\x12B\x12C\a\x5\x2\x2\x12C\x12D\x5N(\x2"+
		"\x12D\x12E\a\x6\x2\x2\x12EK\x3\x2\x2\x2\x12F\x131\x5T+\x2\x130\x12F\x3"+
		"\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x138\x5V,\x2"+
		"\x133\x135\x5T+\x2\x134\x136\x5V,\x2\x135\x134\x3\x2\x2\x2\x135\x136\x3"+
		"\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x130\x3\x2\x2\x2\x137\x133\x3\x2"+
		"\x2\x2\x138M\x3\x2\x2\x2\x139\x13C\x5\\/\x2\x13A\x13C\x5P)\x2\x13B\x139"+
		"\x3\x2\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D\x13B\x3"+
		"\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13EO\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2"+
		"\x140\x142\x5X-\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143"+
		"\x3\x2\x2\x2\x143\x149\x5Z.\x2\x144\x146\x5X-\x2\x145\x147\x5Z.\x2\x146"+
		"\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148\x141"+
		"\x3\x2\x2\x2\x148\x144\x3\x2\x2\x2\x149Q\x3\x2\x2\x2\x14A\x14B\a\x10\x2"+
		"\x2\x14BS\x3\x2\x2\x2\x14C\x14D\t\x6\x2\x2\x14DU\x3\x2\x2\x2\x14E\x14F"+
		"\a\x13\x2\x2\x14FW\x3\x2\x2\x2\x150\x151\t\x2\x2\x2\x151Y\x3\x2\x2\x2"+
		"\x152\x153\a\x13\x2\x2\x153[\x3\x2\x2\x2\x154\x155\a\r\x2\x2\x155]\x3"+
		"\x2\x2\x2\x37\x61\x65jlpz\x7F\x82\x85\x88\x8B\x8E\x9A\x9D\xA0\xA4\xA7"+
		"\xAA\xB0\xB7\xBA\xBF\xC1\xC6\xCD\xD0\xD2\xDA\xDF\xE4\xE6\xED\xF0\xF3\xF6"+
		"\xFB\xFF\x105\x107\x119\x11C\x11F\x122\x127\x129\x130\x135\x137\x13B\x13D"+
		"\x141\x146\x148";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR.Grammar
