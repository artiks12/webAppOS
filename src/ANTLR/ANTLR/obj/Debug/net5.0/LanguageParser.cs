//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Artis\source\repos\ANTLR\ANTLR\Grammar\LanguageParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
public partial class LanguageParser : Parser {
	public const int
		CURLYOPEN=1, CURLYCLOSE=2, BRACKETOPEN=3, BRACKETCLOSE=4, SQUAREOPEN=5, 
		SQUARECLOSE=6, SEMICOLON=7, COLON=8, QUOTE=9, DOT=10, COMA=11, HASH=12, 
		ARROWS=13, PROTECTION=14, BLOCKTYPE=15, DATATYPE=16, NAME=17, WS=18, ANYTHING=19;
	public const int
		RULE_code = 0, RULE_blocks = 1, RULE_blockBody = 2, RULE_blockType = 3, 
		RULE_webMemoryClass = 4, RULE_classHead = 5, RULE_superClass = 6, RULE_classBody = 7, 
		RULE_className = 8, RULE_superClassName = 9, RULE_fields = 10, RULE_field = 11, 
		RULE_fieldDefinition = 12, RULE_variableDefinition = 13, RULE_variable = 14, 
		RULE_methodDefinition = 15, RULE_fieldProtection = 16, RULE_fieldDataType = 17, 
		RULE_fieldName = 18, RULE_annotation = 19, RULE_annotationContent = 20, 
		RULE_annotationBody = 21, RULE_annotationDefinition = 22, RULE_annotationValue = 23, 
		RULE_annotationAttributes = 24, RULE_urlAttributes = 25, RULE_annotationData = 26, 
		RULE_annotationType = 27, RULE_annotationSeperator = 28, RULE_protocol = 29, 
		RULE_location = 30, RULE_startQuote = 31, RULE_endQuote = 32, RULE_arguments = 33, 
		RULE_argument = 34, RULE_argumentDataType = 35, RULE_argumentName = 36, 
		RULE_coma = 37, RULE_association = 38, RULE_associationDefinition = 39, 
		RULE_associationSource = 40, RULE_associationTarget = 41, RULE_associationSourceName = 42, 
		RULE_associationTargetName = 43, RULE_associationSourceClass = 44, RULE_associationTargetClass = 45;
	public static readonly string[] ruleNames = {
		"code", "blocks", "blockBody", "blockType", "webMemoryClass", "classHead", 
		"superClass", "classBody", "className", "superClassName", "fields", "field", 
		"fieldDefinition", "variableDefinition", "variable", "methodDefinition", 
		"fieldProtection", "fieldDataType", "fieldName", "annotation", "annotationContent", 
		"annotationBody", "annotationDefinition", "annotationValue", "annotationAttributes", 
		"urlAttributes", "annotationData", "annotationType", "annotationSeperator", 
		"protocol", "location", "startQuote", "endQuote", "arguments", "argument", 
		"argumentDataType", "argumentName", "coma", "association", "associationDefinition", 
		"associationSource", "associationTarget", "associationSourceName", "associationTargetName", 
		"associationSourceClass", "associationTargetClass"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "'\"'", 
		"'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"PROTECTION", "BLOCKTYPE", "DATATYPE", "NAME", "WS", "ANYTHING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public BlocksContext[] blocks() {
			return GetRuleContexts<BlocksContext>();
		}
		public BlocksContext blocks(int i) {
			return GetRuleContext<BlocksContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURLYOPEN) | (1L << BRACKETOPEN) | (1L << COLON) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				{
				State = 92; blocks();
				}
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksContext : ParserRuleContext {
		public BlockBodyContext blockBody() {
			return GetRuleContext<BlockBodyContext>(0);
		}
		public BlockTypeContext blockType() {
			return GetRuleContext<BlockTypeContext>(0);
		}
		public BlocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocks; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlocks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlocks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksContext blocks() {
		BlocksContext _localctx = new BlocksContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_blocks);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BLOCKTYPE) {
					{
					State = 98; blockType();
					}
				}

				State = 101; blockBody();
				}
				break;

			case 2:
				{
				State = 102; blockType();
				State = 104;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 103; blockBody();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockBodyContext : ParserRuleContext {
		public WebMemoryClassContext webMemoryClass() {
			return GetRuleContext<WebMemoryClassContext>(0);
		}
		public AssociationContext association() {
			return GetRuleContext<AssociationContext>(0);
		}
		public BlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockBodyContext blockBody() {
		BlockBodyContext _localctx = new BlockBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_blockBody);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CURLYOPEN:
			case COLON:
			case PROTECTION:
			case DATATYPE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; webMemoryClass();
				}
				break;
			case BRACKETOPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; association();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTypeContext : ParserRuleContext {
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public BlockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBlockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBlockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTypeContext blockType() {
		BlockTypeContext _localctx = new BlockTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_blockType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(BLOCKTYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebMemoryClassContext : ParserRuleContext {
		public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public WebMemoryClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webMemoryClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWebMemoryClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWebMemoryClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebMemoryClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebMemoryClassContext webMemoryClass() {
		WebMemoryClassContext _localctx = new WebMemoryClassContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_webMemoryClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 114; classHead();
				State = 116;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 115; classBody();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLON) | (1L << PROTECTION) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 118; classHead();
					}
				}

				State = 121; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext classHead() {
		ClassHeadContext _localctx = new ClassHeadContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 124; className();
				State = 126;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 125; superClass();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 128; className();
					}
				}

				State = 131; superClass();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public SuperClassNameContext superClassName() {
			return GetRuleContext<SuperClassNameContext>(0);
		}
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_superClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(COLON);
			State = 136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 135; superClassName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode CURLYOPEN() { return GetToken(LanguageParser.CURLYOPEN, 0); }
		public ITerminalNode CURLYCLOSE() { return GetToken(LanguageParser.CURLYCLOSE, 0); }
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(CURLYOPEN);
			State = 142;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << SQUAREOPEN) | (1L << SEMICOLON) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				{
				State = 139; fields();
				}
				}
				State = 144;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 145; Match(CURLYCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_className);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public SuperClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClassName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassNameContext superClassName() {
		SuperClassNameContext _localctx = new SuperClassNameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_superClassName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << SQUAREOPEN) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 151; field();
					}
				}

				State = 154; Match(SEMICOLON);
				}
				break;

			case 2:
				{
				State = 155; field();
				State = 157;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 156; Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SQUAREOPEN) {
					{
					{
					State = 161; annotation();
					}
					}
					State = 166;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 167; fieldDefinition();
				}
				break;

			case 2:
				{
				State = 169;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 168; annotation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 171;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 174;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 173; fieldDefinition();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public VariableDefinitionContext variableDefinition() {
			return GetRuleContext<VariableDefinitionContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 178; variableDefinition();
				State = 180;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 179; methodDefinition();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 182; variableDefinition();
					}
				}

				State = 185; methodDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FieldProtectionContext fieldProtection() {
			return GetRuleContext<FieldProtectionContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 189;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROTECTION) {
					{
					State = 188; fieldProtection();
					}
				}

				State = 191; variable();
				}
				break;

			case 2:
				{
				State = 192; fieldProtection();
				State = 194;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					State = 193; variable();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public FieldDataTypeContext fieldDataType() {
			return GetRuleContext<FieldDataTypeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DATATYPE) {
					{
					State = 198; fieldDataType();
					}
				}

				State = 201; fieldName();
				}
				break;

			case 2:
				{
				State = 202; fieldDataType();
				State = 204;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 203; fieldName();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(BRACKETOPEN);
			State = 209; arguments();
			State = 210; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldProtectionContext : ParserRuleContext {
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public FieldProtectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldProtection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldProtection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldProtection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldProtection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldProtectionContext fieldProtection() {
		FieldProtectionContext _localctx = new FieldProtectionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fieldProtection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(PROTECTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDataTypeContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public FieldDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDataTypeContext fieldDataType() {
		FieldDataTypeContext _localctx = new FieldDataTypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_fieldDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(DATATYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_fieldName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = _input.La(1);
			if ( !(_la==BLOCKTYPE || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode SQUAREOPEN() { return GetToken(LanguageParser.SQUAREOPEN, 0); }
		public ITerminalNode SQUARECLOSE() { return GetToken(LanguageParser.SQUARECLOSE, 0); }
		public AnnotationContentContext annotationContent() {
			return GetRuleContext<AnnotationContentContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(SQUAREOPEN);
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACKETOPEN) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 219; annotationContent();
				}
			}

			State = 222; Match(SQUARECLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContentContext : ParserRuleContext {
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationTypeContext annotationType() {
			return GetRuleContext<AnnotationTypeContext>(0);
		}
		public AnnotationContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContentContext annotationContent() {
		AnnotationContentContext _localctx = new AnnotationContentContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_annotationContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
					{
					State = 224; annotationType();
					}
				}

				State = 227; annotationBody();
				}
				break;

			case 2:
				{
				State = 228; annotationType();
				State = 230;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BRACKETOPEN) {
					{
					State = 229; annotationBody();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public AnnotationDefinitionContext annotationDefinition() {
			return GetRuleContext<AnnotationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(BRACKETOPEN);
			State = 235; annotationDefinition();
			State = 236; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDefinitionContext : ParserRuleContext {
		public StartQuoteContext startQuote() {
			return GetRuleContext<StartQuoteContext>(0);
		}
		public AnnotationValueContext annotationValue() {
			return GetRuleContext<AnnotationValueContext>(0);
		}
		public EndQuoteContext endQuote() {
			return GetRuleContext<EndQuoteContext>(0);
		}
		public AnnotationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDefinitionContext annotationDefinition() {
		AnnotationDefinitionContext _localctx = new AnnotationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_annotationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 238; startQuote();
				}
				break;
			}
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0)) {
				{
				State = 241; annotationValue();
				}
			}

			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QUOTE) {
				{
				State = 244; endQuote();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationValueContext : ParserRuleContext {
		public AnnotationAttributesContext annotationAttributes() {
			return GetRuleContext<AnnotationAttributesContext>(0);
		}
		public UrlAttributesContext urlAttributes() {
			return GetRuleContext<UrlAttributesContext>(0);
		}
		public AnnotationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationValueContext annotationValue() {
		AnnotationValueContext _localctx = new AnnotationValueContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_annotationValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 247; urlAttributes();
				}
				break;
			}
			State = 250; annotationAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributesContext : ParserRuleContext {
		public AnnotationDataContext[] annotationData() {
			return GetRuleContexts<AnnotationDataContext>();
		}
		public AnnotationDataContext annotationData(int i) {
			return GetRuleContext<AnnotationDataContext>(i);
		}
		public AnnotationSeperatorContext[] annotationSeperator() {
			return GetRuleContexts<AnnotationSeperatorContext>();
		}
		public AnnotationSeperatorContext annotationSeperator(int i) {
			return GetRuleContext<AnnotationSeperatorContext>(i);
		}
		public AnnotationAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributesContext annotationAttributes() {
		AnnotationAttributesContext _localctx = new AnnotationAttributesContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_annotationAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 254;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PROTECTION:
				case BLOCKTYPE:
				case DATATYPE:
				case NAME:
				case ANYTHING:
					{
					State = 252; annotationData();
					}
					break;
				case SEMICOLON:
				case COLON:
				case DOT:
				case COMA:
				case HASH:
					{
					State = 253; annotationSeperator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 256;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlAttributesContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public ProtocolContext protocol() {
			return GetRuleContext<ProtocolContext>(0);
		}
		public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		public UrlAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrlAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrlAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlAttributesContext urlAttributes() {
		UrlAttributesContext _localctx = new UrlAttributesContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_urlAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 258; protocol();
				}
			}

			State = 261; Match(COLON);
			State = 263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 262; location();
				}
			}

			State = 265; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDataContext : ParserRuleContext {
		public ITerminalNode ANYTHING() { return GetToken(LanguageParser.ANYTHING, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public AnnotationDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationData; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDataContext annotationData() {
		AnnotationDataContext _localctx = new AnnotationDataContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_annotationData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME) | (1L << ANYTHING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public AnnotationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeContext annotationType() {
		AnnotationTypeContext _localctx = new AnnotationTypeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_annotationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationSeperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ITerminalNode COMA() { return GetToken(LanguageParser.COMA, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode HASH() { return GetToken(LanguageParser.HASH, 0); }
		public AnnotationSeperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationSeperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationSeperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationSeperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationSeperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationSeperatorContext annotationSeperator() {
		AnnotationSeperatorContext _localctx = new AnnotationSeperatorContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_annotationSeperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << COLON) | (1L << DOT) | (1L << COMA) | (1L << HASH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ProtocolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProtocol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProtocol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolContext protocol() {
		ProtocolContext _localctx = new ProtocolContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_protocol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public StartQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStartQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStartQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartQuoteContext startQuote() {
		StartQuoteContext _localctx = new StartQuoteContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_startQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndQuoteContext : ParserRuleContext {
		public ITerminalNode QUOTE() { return GetToken(LanguageParser.QUOTE, 0); }
		public EndQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endQuote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterEndQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitEndQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndQuoteContext endQuote() {
		EndQuoteContext _localctx = new EndQuoteContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_endQuote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ComaContext[] coma() {
			return GetRuleContexts<ComaContext>();
		}
		public ComaContext coma(int i) {
			return GetRuleContext<ComaContext>(i);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMA) | (1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 283;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case COMA:
					{
					State = 281; coma();
					}
					break;
				case PROTECTION:
				case BLOCKTYPE:
				case DATATYPE:
				case NAME:
					{
					State = 282; argument();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 287;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public ArgumentDataTypeContext argumentDataType() {
			return GetRuleContext<ArgumentDataTypeContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 289;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DATATYPE) {
					{
					State = 288; argumentDataType();
					}
				}

				State = 291; argumentName();
				}
				break;

			case 2:
				{
				State = 292; argumentDataType();
				State = 294;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 293; argumentName();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDataTypeContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ArgumentDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDataTypeContext argumentDataType() {
		ArgumentDataTypeContext _localctx = new ArgumentDataTypeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_argumentDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(DATATYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_argumentName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComaContext : ParserRuleContext {
		public ITerminalNode COMA() { return GetToken(LanguageParser.COMA, 0); }
		public ComaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coma; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterComa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitComa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComaContext coma() {
		ComaContext _localctx = new ComaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_coma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public AssociationDefinitionContext associationDefinition() {
			return GetRuleContext<AssociationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(BRACKETOPEN);
			State = 305; associationDefinition();
			State = 306; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDefinitionContext : ParserRuleContext {
		public AssociationSourceContext associationSource() {
			return GetRuleContext<AssociationSourceContext>(0);
		}
		public AssociationTargetContext associationTarget() {
			return GetRuleContext<AssociationTargetContext>(0);
		}
		public ITerminalNode ARROWS() { return GetToken(LanguageParser.ARROWS, 0); }
		public AssociationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDefinitionContext associationDefinition() {
		AssociationDefinitionContext _localctx = new AssociationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_associationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; associationSource();
			State = 310;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARROWS) {
				{
				State = 309; Match(ARROWS);
				}
			}

			State = 312; associationTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceContext : ParserRuleContext {
		public AssociationSourceNameContext associationSourceName() {
			return GetRuleContext<AssociationSourceNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public AssociationSourceClassContext associationSourceClass() {
			return GetRuleContext<AssociationSourceClassContext>(0);
		}
		public AssociationSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceContext associationSource() {
		AssociationSourceContext _localctx = new AssociationSourceContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_associationSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 314; associationSourceName();
				}
				break;
			}
			State = 318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 317; Match(COLON);
				}
				break;
			}
			State = 321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 320; associationSourceClass();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetContext : ParserRuleContext {
		public AssociationTargetNameContext associationTargetName() {
			return GetRuleContext<AssociationTargetNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public AssociationTargetClassContext associationTargetClass() {
			return GetRuleContext<AssociationTargetClassContext>(0);
		}
		public AssociationTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetContext associationTarget() {
		AssociationTargetContext _localctx = new AssociationTargetContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_associationTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 323; associationTargetName();
				}
				break;
			}
			State = 327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 326; Match(COLON);
				}
			}

			State = 330;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) {
				{
				State = 329; associationTargetClass();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationSourceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceNameContext associationSourceName() {
		AssociationSourceNameContext _localctx = new AssociationSourceNameContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_associationSourceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationTargetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetNameContext associationTargetName() {
		AssociationTargetNameContext _localctx = new AssociationTargetNameContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_associationTargetName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationSourceClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceClassContext associationSourceClass() {
		AssociationSourceClassContext _localctx = new AssociationSourceClassContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_associationSourceClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ITerminalNode PROTECTION() { return GetToken(LanguageParser.PROTECTION, 0); }
		public ITerminalNode DATATYPE() { return GetToken(LanguageParser.DATATYPE, 0); }
		public ITerminalNode BLOCKTYPE() { return GetToken(LanguageParser.BLOCKTYPE, 0); }
		public AssociationTargetClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetClassContext associationTargetClass() {
		AssociationTargetClassContext _localctx = new AssociationTargetClassContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_associationTargetClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECTION) | (1L << BLOCKTYPE) | (1L << DATATYPE) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15\x157\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x3\x2\a\x2`\n\x2\f\x2\xE\x2\x63\v"+
		"\x2\x3\x3\x5\x3\x66\n\x3\x3\x3\x3\x3\x3\x3\x5\x3k\n\x3\x5\x3m\n\x3\x3"+
		"\x4\x3\x4\x5\x4q\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6w\n\x6\x3\x6\x5\x6"+
		"z\n\x6\x3\x6\x5\x6}\n\x6\x3\a\x3\a\x5\a\x81\n\a\x3\a\x5\a\x84\n\a\x3\a"+
		"\x5\a\x87\n\a\x3\b\x3\b\x5\b\x8B\n\b\x3\t\x3\t\a\t\x8F\n\t\f\t\xE\t\x92"+
		"\v\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x5\f\x9B\n\f\x3\f\x3\f\x3\f\x5"+
		"\f\xA0\n\f\x5\f\xA2\n\f\x3\r\a\r\xA5\n\r\f\r\xE\r\xA8\v\r\x3\r\x3\r\x6"+
		"\r\xAC\n\r\r\r\xE\r\xAD\x3\r\x5\r\xB1\n\r\x5\r\xB3\n\r\x3\xE\x3\xE\x5"+
		"\xE\xB7\n\xE\x3\xE\x5\xE\xBA\n\xE\x3\xE\x5\xE\xBD\n\xE\x3\xF\x5\xF\xC0"+
		"\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\xC5\n\xF\x5\xF\xC7\n\xF\x3\x10\x5\x10\xCA"+
		"\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\xCF\n\x10\x5\x10\xD1\n\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x5\x15\xDF\n\x15\x3\x15\x3\x15\x3\x16\x5\x16\xE4\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x5\x16\xE9\n\x16\x5\x16\xEB\n\x16\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x18\x5\x18\xF2\n\x18\x3\x18\x5\x18\xF5\n\x18\x3\x18\x5\x18\xF8"+
		"\n\x18\x3\x19\x5\x19\xFB\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x6\x1A\x101"+
		"\n\x1A\r\x1A\xE\x1A\x102\x3\x1B\x5\x1B\x106\n\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x10A\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\a#\x11E\n#\f#\xE#\x121\v"+
		"#\x3$\x5$\x124\n$\x3$\x3$\x3$\x5$\x129\n$\x5$\x12B\n$\x3%\x3%\x3&\x3&"+
		"\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x5)\x139\n)\x3)\x3)\x3*\x5*\x13E\n"+
		"*\x3*\x5*\x141\n*\x3*\x5*\x144\n*\x3+\x5+\x147\n+\x3+\x5+\x14A\n+\x3+"+
		"\x5+\x14D\n+\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x2\x2\x2\x30\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2"+
		"R\x2T\x2V\x2X\x2Z\x2\\\x2\x2\b\x4\x2\x10\x10\x12\x13\x4\x2\x11\x11\x13"+
		"\x13\x4\x2\x10\x13\x15\x15\x3\x2\x10\x13\x4\x2\t\n\f\xE\x4\x2\x10\x11"+
		"\x13\x13\x15D\x2\x61\x3\x2\x2\x2\x4l\x3\x2\x2\x2\x6p\x3\x2\x2\x2\br\x3"+
		"\x2\x2\x2\n|\x3\x2\x2\x2\f\x86\x3\x2\x2\x2\xE\x88\x3\x2\x2\x2\x10\x8C"+
		"\x3\x2\x2\x2\x12\x95\x3\x2\x2\x2\x14\x97\x3\x2\x2\x2\x16\xA1\x3\x2\x2"+
		"\x2\x18\xB2\x3\x2\x2\x2\x1A\xBC\x3\x2\x2\x2\x1C\xC6\x3\x2\x2\x2\x1E\xD0"+
		"\x3\x2\x2\x2 \xD2\x3\x2\x2\x2\"\xD6\x3\x2\x2\x2$\xD8\x3\x2\x2\x2&\xDA"+
		"\x3\x2\x2\x2(\xDC\x3\x2\x2\x2*\xEA\x3\x2\x2\x2,\xEC\x3\x2\x2\x2.\xF1\x3"+
		"\x2\x2\x2\x30\xFA\x3\x2\x2\x2\x32\x100\x3\x2\x2\x2\x34\x105\x3\x2\x2\x2"+
		"\x36\x10D\x3\x2\x2\x2\x38\x10F\x3\x2\x2\x2:\x111\x3\x2\x2\x2<\x113\x3"+
		"\x2\x2\x2>\x115\x3\x2\x2\x2@\x117\x3\x2\x2\x2\x42\x119\x3\x2\x2\x2\x44"+
		"\x11F\x3\x2\x2\x2\x46\x12A\x3\x2\x2\x2H\x12C\x3\x2\x2\x2J\x12E\x3\x2\x2"+
		"\x2L\x130\x3\x2\x2\x2N\x132\x3\x2\x2\x2P\x136\x3\x2\x2\x2R\x13D\x3\x2"+
		"\x2\x2T\x146\x3\x2\x2\x2V\x14E\x3\x2\x2\x2X\x150\x3\x2\x2\x2Z\x152\x3"+
		"\x2\x2\x2\\\x154\x3\x2\x2\x2^`\x5\x4\x3\x2_^\x3\x2\x2\x2`\x63\x3\x2\x2"+
		"\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x3\x3\x2\x2\x2\x63\x61\x3"+
		"\x2\x2\x2\x64\x66\x5\b\x5\x2\x65\x64\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"g\x3\x2\x2\x2gm\x5\x6\x4\x2hj\x5\b\x5\x2ik\x5\x6\x4\x2ji\x3\x2\x2\x2j"+
		"k\x3\x2\x2\x2km\x3\x2\x2\x2l\x65\x3\x2\x2\x2lh\x3\x2\x2\x2m\x5\x3\x2\x2"+
		"\x2nq\x5\n\x6\x2oq\x5N(\x2pn\x3\x2\x2\x2po\x3\x2\x2\x2q\a\x3\x2\x2\x2"+
		"rs\a\x11\x2\x2s\t\x3\x2\x2\x2tv\x5\f\a\x2uw\x5\x10\t\x2vu\x3\x2\x2\x2"+
		"vw\x3\x2\x2\x2w}\x3\x2\x2\x2xz\x5\f\a\x2yx\x3\x2\x2\x2yz\x3\x2\x2\x2z"+
		"{\x3\x2\x2\x2{}\x5\x10\t\x2|t\x3\x2\x2\x2|y\x3\x2\x2\x2}\v\x3\x2\x2\x2"+
		"~\x80\x5\x12\n\x2\x7F\x81\x5\xE\b\x2\x80\x7F\x3\x2\x2\x2\x80\x81\x3\x2"+
		"\x2\x2\x81\x87\x3\x2\x2\x2\x82\x84\x5\x12\n\x2\x83\x82\x3\x2\x2\x2\x83"+
		"\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x87\x5\xE\b\x2\x86~\x3\x2\x2"+
		"\x2\x86\x83\x3\x2\x2\x2\x87\r\x3\x2\x2\x2\x88\x8A\a\n\x2\x2\x89\x8B\x5"+
		"\x14\v\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\xF\x3\x2\x2\x2\x8C"+
		"\x90\a\x3\x2\x2\x8D\x8F\x5\x16\f\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3\x2"+
		"\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92"+
		"\x90\x3\x2\x2\x2\x93\x94\a\x4\x2\x2\x94\x11\x3\x2\x2\x2\x95\x96\t\x2\x2"+
		"\x2\x96\x13\x3\x2\x2\x2\x97\x98\t\x2\x2\x2\x98\x15\x3\x2\x2\x2\x99\x9B"+
		"\x5\x18\r\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2"+
		"\x2\x9C\xA2\a\t\x2\x2\x9D\x9F\x5\x18\r\x2\x9E\xA0\a\t\x2\x2\x9F\x9E\x3"+
		"\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x3\x2\x2\x2\xA1\x9A\x3\x2\x2\x2"+
		"\xA1\x9D\x3\x2\x2\x2\xA2\x17\x3\x2\x2\x2\xA3\xA5\x5(\x15\x2\xA4\xA3\x3"+
		"\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2"+
		"\xA7\xA9\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xB3\x5\x1A\xE\x2\xAA\xAC"+
		"\x5(\x15\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2"+
		"\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xB1\x5\x1A\xE\x2\xB0\xAF"+
		"\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xA6\x3\x2\x2"+
		"\x2\xB2\xAB\x3\x2\x2\x2\xB3\x19\x3\x2\x2\x2\xB4\xB6\x5\x1C\xF\x2\xB5\xB7"+
		"\x5 \x11\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBD\x3\x2\x2\x2"+
		"\xB8\xBA\x5\x1C\xF\x2\xB9\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB"+
		"\x3\x2\x2\x2\xBB\xBD\x5 \x11\x2\xBC\xB4\x3\x2\x2\x2\xBC\xB9\x3\x2\x2\x2"+
		"\xBD\x1B\x3\x2\x2\x2\xBE\xC0\x5\"\x12\x2\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3"+
		"\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC7\x5\x1E\x10\x2\xC2\xC4\x5\"\x12\x2"+
		"\xC3\xC5\x5\x1E\x10\x2\xC4\xC3\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7"+
		"\x3\x2\x2\x2\xC6\xBF\x3\x2\x2\x2\xC6\xC2\x3\x2\x2\x2\xC7\x1D\x3\x2\x2"+
		"\x2\xC8\xCA\x5$\x13\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB"+
		"\x3\x2\x2\x2\xCB\xD1\x5&\x14\x2\xCC\xCE\x5$\x13\x2\xCD\xCF\x5&\x14\x2"+
		"\xCE\xCD\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0\xC9\x3"+
		"\x2\x2\x2\xD0\xCC\x3\x2\x2\x2\xD1\x1F\x3\x2\x2\x2\xD2\xD3\a\x5\x2\x2\xD3"+
		"\xD4\x5\x44#\x2\xD4\xD5\a\x6\x2\x2\xD5!\x3\x2\x2\x2\xD6\xD7\a\x10\x2\x2"+
		"\xD7#\x3\x2\x2\x2\xD8\xD9\a\x12\x2\x2\xD9%\x3\x2\x2\x2\xDA\xDB\t\x3\x2"+
		"\x2\xDB\'\x3\x2\x2\x2\xDC\xDE\a\a\x2\x2\xDD\xDF\x5*\x16\x2\xDE\xDD\x3"+
		"\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\a\b\x2\x2\xE1"+
		")\x3\x2\x2\x2\xE2\xE4\x5\x38\x1D\x2\xE3\xE2\x3\x2\x2\x2\xE3\xE4\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xEB\x5,\x17\x2\xE6\xE8\x5\x38\x1D\x2\xE7"+
		"\xE9\x5,\x17\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEB\x3\x2"+
		"\x2\x2\xEA\xE3\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEB+\x3\x2\x2\x2\xEC\xED"+
		"\a\x5\x2\x2\xED\xEE\x5.\x18\x2\xEE\xEF\a\x6\x2\x2\xEF-\x3\x2\x2\x2\xF0"+
		"\xF2\x5@!\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2"+
		"\x2\xF3\xF5\x5\x30\x19\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5"+
		"\xF7\x3\x2\x2\x2\xF6\xF8\x5\x42\"\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2"+
		"\x2\x2\xF8/\x3\x2\x2\x2\xF9\xFB\x5\x34\x1B\x2\xFA\xF9\x3\x2\x2\x2\xFA"+
		"\xFB\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\x5\x32\x1A\x2\xFD\x31\x3"+
		"\x2\x2\x2\xFE\x101\x5\x36\x1C\x2\xFF\x101\x5:\x1E\x2\x100\xFE\x3\x2\x2"+
		"\x2\x100\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102"+
		"\x103\x3\x2\x2\x2\x103\x33\x3\x2\x2\x2\x104\x106\x5<\x1F\x2\x105\x104"+
		"\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x109\a\n"+
		"\x2\x2\x108\x10A\x5> \x2\x109\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A"+
		"\x10B\x3\x2\x2\x2\x10B\x10C\a\n\x2\x2\x10C\x35\x3\x2\x2\x2\x10D\x10E\t"+
		"\x4\x2\x2\x10E\x37\x3\x2\x2\x2\x10F\x110\t\x5\x2\x2\x110\x39\x3\x2\x2"+
		"\x2\x111\x112\t\x6\x2\x2\x112;\x3\x2\x2\x2\x113\x114\t\x5\x2\x2\x114="+
		"\x3\x2\x2\x2\x115\x116\t\x5\x2\x2\x116?\x3\x2\x2\x2\x117\x118\a\v\x2\x2"+
		"\x118\x41\x3\x2\x2\x2\x119\x11A\a\v\x2\x2\x11A\x43\x3\x2\x2\x2\x11B\x11E"+
		"\x5L\'\x2\x11C\x11E\x5\x46$\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11C\x3\x2\x2"+
		"\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2"+
		"\x120\x45\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x122\x124\x5H%\x2\x123\x122"+
		"\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x12B\x5"+
		"J&\x2\x126\x128\x5H%\x2\x127\x129\x5J&\x2\x128\x127\x3\x2\x2\x2\x128\x129"+
		"\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x123\x3\x2\x2\x2\x12A\x126\x3"+
		"\x2\x2\x2\x12BG\x3\x2\x2\x2\x12C\x12D\a\x12\x2\x2\x12DI\x3\x2\x2\x2\x12E"+
		"\x12F\t\a\x2\x2\x12FK\x3\x2\x2\x2\x130\x131\a\r\x2\x2\x131M\x3\x2\x2\x2"+
		"\x132\x133\a\x5\x2\x2\x133\x134\x5P)\x2\x134\x135\a\x6\x2\x2\x135O\x3"+
		"\x2\x2\x2\x136\x138\x5R*\x2\x137\x139\a\xF\x2\x2\x138\x137\x3\x2\x2\x2"+
		"\x138\x139\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x5T+\x2\x13BQ\x3"+
		"\x2\x2\x2\x13C\x13E\x5V,\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2"+
		"\x13E\x140\x3\x2\x2\x2\x13F\x141\a\n\x2\x2\x140\x13F\x3\x2\x2\x2\x140"+
		"\x141\x3\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x144\x5Z.\x2\x143\x142\x3"+
		"\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144S\x3\x2\x2\x2\x145\x147\x5X-\x2\x146"+
		"\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148\x14A"+
		"\a\n\x2\x2\x149\x148\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14C\x3\x2"+
		"\x2\x2\x14B\x14D\x5\\/\x2\x14C\x14B\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2"+
		"\x14DU\x3\x2\x2\x2\x14E\x14F\t\x5\x2\x2\x14FW\x3\x2\x2\x2\x150\x151\t"+
		"\x5\x2\x2\x151Y\x3\x2\x2\x2\x152\x153\t\x5\x2\x2\x153[\x3\x2\x2\x2\x154"+
		"\x155\t\x5\x2\x2\x155]\x3\x2\x2\x2\x37\x61\x65jlpvy|\x80\x83\x86\x8A\x90"+
		"\x9A\x9F\xA1\xA6\xAD\xB0\xB2\xB6\xB9\xBC\xBF\xC4\xC6\xC9\xCE\xD0\xDE\xE3"+
		"\xE8\xEA\xF1\xF4\xF7\xFA\x100\x102\x105\x109\x11D\x11F\x123\x128\x12A"+
		"\x138\x13D\x140\x143\x146\x149\x14C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR.Grammar
