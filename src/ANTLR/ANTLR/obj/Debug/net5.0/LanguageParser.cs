//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Artis\source\repos\ANTLR\ANTLR\LanguageParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	public const int
		CURLYOPEN=1, CURLYCLOSE=2, BRACKETOPEN=3, BRACKETCLOSE=4, SQUAREOPEN=5, 
		SQUARECLOSE=6, SEMICOLON=7, COLON=8, QUOTE=9, DOT=10, COMA=11, HASH=12, 
		ARROWS=13, CLASS=14, ASSOCIATION=15, URL=16, PUBLIC=17, PRIVATE=18, TYPE=19, 
		NAME=20, WS=21, ANYEXCEPTQUOTE=22;
	public const int
		RULE_code = 0, RULE_webMemoryClass = 1, RULE_superClass = 2, RULE_classBody = 3, 
		RULE_classType = 4, RULE_className = 5, RULE_superClassName = 6, RULE_method = 7, 
		RULE_url = 8, RULE_urlDefinition = 9, RULE_urlType = 10, RULE_protocolName = 11, 
		RULE_location = 12, RULE_methodPath = 13, RULE_methodAnnotation = 14, 
		RULE_annotationType = 15, RULE_annotationDefinition = 16, RULE_methodDefinition = 17, 
		RULE_methodProtection = 18, RULE_methodDataType = 19, RULE_methodName = 20, 
		RULE_arguments = 21, RULE_argument = 22, RULE_argumentDataType = 23, RULE_argumentName = 24, 
		RULE_variable = 25, RULE_variableProtection = 26, RULE_variableDataType = 27, 
		RULE_variableName = 28, RULE_associations = 29, RULE_associationType = 30, 
		RULE_associationSourceName = 31, RULE_associationTargetName = 32, RULE_sourceClass = 33, 
		RULE_targetClass = 34;
	public static readonly string[] ruleNames = {
		"code", "webMemoryClass", "superClass", "classBody", "classType", "className", 
		"superClassName", "method", "url", "urlDefinition", "urlType", "protocolName", 
		"location", "methodPath", "methodAnnotation", "annotationType", "annotationDefinition", 
		"methodDefinition", "methodProtection", "methodDataType", "methodName", 
		"arguments", "argument", "argumentDataType", "argumentName", "variable", 
		"variableProtection", "variableDataType", "variableName", "associations", 
		"associationType", "associationSourceName", "associationTargetName", "sourceClass", 
		"targetClass"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "'\"'", 
		"'.'", "','", "'#'", null, "'class'", "'association'", "'URL'", "'public'", 
		"'private'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"CLASS", "ASSOCIATION", "URL", "PUBLIC", "PRIVATE", "TYPE", "NAME", "WS", 
		"ANYEXCEPTQUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public WebMemoryClassContext[] webMemoryClass() {
			return GetRuleContexts<WebMemoryClassContext>();
		}
		public WebMemoryClassContext webMemoryClass(int i) {
			return GetRuleContext<WebMemoryClassContext>(i);
		}
		public AssociationsContext[] associations() {
			return GetRuleContexts<AssociationsContext>();
		}
		public AssociationsContext associations(int i) {
			return GetRuleContext<AssociationsContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ASSOCIATION) | (1L << NAME))) != 0)) {
				{
				State = 72;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 70; webMemoryClass();
					}
					break;

				case 2:
					{
					State = 71; associations();
					}
					break;
				}
				}
				State = 76;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebMemoryClassContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ITerminalNode CURLYOPEN() { return GetToken(LanguageParser.CURLYOPEN, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode CURLYCLOSE() { return GetToken(LanguageParser.CURLYCLOSE, 0); }
		public WebMemoryClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webMemoryClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWebMemoryClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWebMemoryClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebMemoryClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebMemoryClassContext webMemoryClass() {
		WebMemoryClassContext _localctx = new WebMemoryClassContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_webMemoryClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; classType();
			State = 78; className();
			State = 79; superClass();
			State = 80; Match(CURLYOPEN);
			State = 81; classBody();
			State = 82; Match(CURLYCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public SuperClassNameContext[] superClassName() {
			return GetRuleContexts<SuperClassNameContext>();
		}
		public SuperClassNameContext superClassName(int i) {
			return GetRuleContext<SuperClassNameContext>(i);
		}
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_superClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 84; Match(COLON);
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 85; superClassName();
					}
					}
					State = 90;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode[] SEMICOLON() { return GetTokens(LanguageParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(LanguageParser.SEMICOLON, i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SQUAREOPEN) | (1L << SEMICOLON) | (1L << PUBLIC) | (1L << PRIVATE) | (1L << TYPE) | (1L << NAME))) != 0)) {
				{
				{
				State = 95;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PUBLIC:
				case PRIVATE:
				case TYPE:
				case NAME:
					{
					State = 93; variable();
					}
					break;
				case SQUAREOPEN:
					{
					State = 94; method();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				State = 97; Match(SEMICOLON);
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(LanguageParser.CLASS, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = _input.La(1);
			if ( !(_la==CLASS || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public SuperClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClassName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSuperClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSuperClassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassNameContext superClassName() {
		SuperClassNameContext _localctx = new SuperClassNameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_superClassName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public MethodAnnotationContext[] methodAnnotation() {
			return GetRuleContexts<MethodAnnotationContext>();
		}
		public MethodAnnotationContext methodAnnotation(int i) {
			return GetRuleContext<MethodAnnotationContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; url();
			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SQUAREOPEN) {
				{
				{
				State = 110; methodAnnotation();
				}
				}
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 116; methodDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlContext : ParserRuleContext {
		public ITerminalNode SQUAREOPEN() { return GetToken(LanguageParser.SQUAREOPEN, 0); }
		public UrlTypeContext urlType() {
			return GetRuleContext<UrlTypeContext>(0);
		}
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ITerminalNode[] QUOTE() { return GetTokens(LanguageParser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(LanguageParser.QUOTE, i);
		}
		public UrlDefinitionContext urlDefinition() {
			return GetRuleContext<UrlDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public ITerminalNode SQUARECLOSE() { return GetToken(LanguageParser.SQUARECLOSE, 0); }
		public UrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_url; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlContext url() {
		UrlContext _localctx = new UrlContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_url);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(SQUAREOPEN);
			State = 119; urlType();
			State = 120; Match(BRACKETOPEN);
			State = 121; Match(QUOTE);
			State = 122; urlDefinition();
			State = 123; Match(QUOTE);
			State = 124; Match(BRACKETCLOSE);
			State = 125; Match(SQUARECLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlDefinitionContext : ParserRuleContext {
		public ProtocolNameContext protocolName() {
			return GetRuleContext<ProtocolNameContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		public MethodPathContext methodPath() {
			return GetRuleContext<MethodPathContext>(0);
		}
		public UrlDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrlDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrlDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlDefinitionContext urlDefinition() {
		UrlDefinitionContext _localctx = new UrlDefinitionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_urlDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; protocolName();
			State = 128; Match(COLON);
			State = 129; location();
			State = 130; Match(COLON);
			State = 131; methodPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlTypeContext : ParserRuleContext {
		public ITerminalNode URL() { return GetToken(LanguageParser.URL, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public UrlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUrlType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUrlType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlTypeContext urlType() {
		UrlTypeContext _localctx = new UrlTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_urlType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = _input.La(1);
			if ( !(_la==URL || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ProtocolNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProtocolName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProtocolName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolNameContext protocolName() {
		ProtocolNameContext _localctx = new ProtocolNameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_protocolName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_location);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodPathContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public MethodPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodPathContext methodPath() {
		MethodPathContext _localctx = new MethodPathContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_methodPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodAnnotationContext : ParserRuleContext {
		public ITerminalNode SQUAREOPEN() { return GetToken(LanguageParser.SQUAREOPEN, 0); }
		public AnnotationTypeContext annotationType() {
			return GetRuleContext<AnnotationTypeContext>(0);
		}
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ITerminalNode[] QUOTE() { return GetTokens(LanguageParser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(LanguageParser.QUOTE, i);
		}
		public AnnotationDefinitionContext annotationDefinition() {
			return GetRuleContext<AnnotationDefinitionContext>(0);
		}
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public ITerminalNode SQUARECLOSE() { return GetToken(LanguageParser.SQUARECLOSE, 0); }
		public MethodAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodAnnotationContext methodAnnotation() {
		MethodAnnotationContext _localctx = new MethodAnnotationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_methodAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(SQUAREOPEN);
			State = 142; annotationType();
			State = 143; Match(BRACKETOPEN);
			State = 144; Match(QUOTE);
			State = 145; annotationDefinition();
			State = 146; Match(QUOTE);
			State = 147; Match(BRACKETCLOSE);
			State = 148; Match(SQUARECLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public AnnotationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeContext annotationType() {
		AnnotationTypeContext _localctx = new AnnotationTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_annotationType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationDefinitionContext : ParserRuleContext {
		public ITerminalNode ANYEXCEPTQUOTE() { return GetToken(LanguageParser.ANYEXCEPTQUOTE, 0); }
		public AnnotationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnnotationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnnotationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationDefinitionContext annotationDefinition() {
		AnnotationDefinitionContext _localctx = new AnnotationDefinitionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_annotationDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(ANYEXCEPTQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public MethodDataTypeContext methodDataType() {
			return GetRuleContext<MethodDataTypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode BRACKETOPEN() { return GetToken(LanguageParser.BRACKETOPEN, 0); }
		public ITerminalNode BRACKETCLOSE() { return GetToken(LanguageParser.BRACKETCLOSE, 0); }
		public MethodProtectionContext methodProtection() {
			return GetRuleContext<MethodProtectionContext>(0);
		}
		public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 154; methodProtection();
				}
			}

			State = 157; methodDataType();
			State = 158; methodName();
			State = 159; Match(BRACKETOPEN);
			State = 163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TYPE || _la==NAME) {
				{
				{
				State = 160; arguments();
				}
				}
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 166; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodProtectionContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(LanguageParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(LanguageParser.PRIVATE, 0); }
		public MethodProtectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodProtection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodProtection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodProtection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProtection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodProtectionContext methodProtection() {
		MethodProtectionContext _localctx = new MethodProtectionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_methodProtection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = _input.La(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDataTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(LanguageParser.TYPE, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public MethodDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDataTypeContext methodDataType() {
		MethodDataTypeContext _localctx = new MethodDataTypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_methodDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = _input.La(1);
			if ( !(_la==TYPE || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(LanguageParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(LanguageParser.COMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 174; argument();
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 175; Match(COMA);
				State = 176; argument();
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentDataTypeContext argumentDataType() {
			return GetRuleContext<ArgumentDataTypeContext>(0);
		}
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; argumentDataType();
			State = 183; argumentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDataTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(LanguageParser.TYPE, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ArgumentDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDataTypeContext argumentDataType() {
		ArgumentDataTypeContext _localctx = new ArgumentDataTypeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_argumentDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = _input.La(1);
			if ( !(_la==TYPE || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableDataTypeContext variableDataType() {
			return GetRuleContext<VariableDataTypeContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public VariableProtectionContext variableProtection() {
			return GetRuleContext<VariableProtectionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 189; variableProtection();
				}
			}

			State = 192; variableDataType();
			State = 193; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableProtectionContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(LanguageParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(LanguageParser.PRIVATE, 0); }
		public VariableProtectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableProtection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariableProtection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariableProtection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableProtection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableProtectionContext variableProtection() {
		VariableProtectionContext _localctx = new VariableProtectionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_variableProtection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = _input.La(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDataTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(LanguageParser.TYPE, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public VariableDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariableDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariableDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDataTypeContext variableDataType() {
		VariableDataTypeContext _localctx = new VariableDataTypeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_variableDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = _input.La(1);
			if ( !(_la==TYPE || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationsContext : ParserRuleContext {
		public AssociationTypeContext associationType() {
			return GetRuleContext<AssociationTypeContext>(0);
		}
		public AssociationSourceNameContext associationSourceName() {
			return GetRuleContext<AssociationSourceNameContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(LanguageParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(LanguageParser.COLON, i);
		}
		public SourceClassContext sourceClass() {
			return GetRuleContext<SourceClassContext>(0);
		}
		public ITerminalNode ARROWS() { return GetToken(LanguageParser.ARROWS, 0); }
		public AssociationTargetNameContext associationTargetName() {
			return GetRuleContext<AssociationTargetNameContext>(0);
		}
		public TargetClassContext targetClass() {
			return GetRuleContext<TargetClassContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public AssociationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationsContext associations() {
		AssociationsContext _localctx = new AssociationsContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_associations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; associationType();
			State = 202; associationSourceName();
			State = 203; Match(COLON);
			State = 204; sourceClass();
			State = 205; Match(ARROWS);
			State = 206; associationTargetName();
			State = 207; Match(COLON);
			State = 208; targetClass();
			State = 209; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTypeContext : ParserRuleContext {
		public ITerminalNode ASSOCIATION() { return GetToken(LanguageParser.ASSOCIATION, 0); }
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public AssociationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTypeContext associationType() {
		AssociationTypeContext _localctx = new AssociationTypeContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_associationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = _input.La(1);
			if ( !(_la==ASSOCIATION || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationSourceNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public AssociationSourceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationSourceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationSourceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationSourceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationSourceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationSourceNameContext associationSourceName() {
		AssociationSourceNameContext _localctx = new AssociationSourceNameContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_associationSourceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationTargetNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public AssociationTargetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationTargetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssociationTargetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssociationTargetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationTargetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationTargetNameContext associationTargetName() {
		AssociationTargetNameContext _localctx = new AssociationTargetNameContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_associationTargetName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public SourceClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSourceClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSourceClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceClassContext sourceClass() {
		SourceClassContext _localctx = new SourceClassContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_sourceClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LanguageParser.NAME, 0); }
		public TargetClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterTargetClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitTargetClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetClassContext targetClass() {
		TargetClassContext _localctx = new TargetClassContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_targetClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x18\xE0\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\a\x2K\n\x2\f\x2\xE\x2N\v\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\a\x4Y\n\x4\f\x4\xE"+
		"\x4\\\v\x4\x5\x4^\n\x4\x3\x5\x3\x5\x5\x5\x62\n\x5\x3\x5\a\x5\x65\n\x5"+
		"\f\x5\xE\x5h\v\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\a\tr\n\t\f"+
		"\t\xE\tu\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x13\x5\x13\x9E\n\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\a\x13\xA4\n\x13\f\x13\xE\x13\xA7\v\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\a\x17\xB4\n\x17\f\x17"+
		"\xE\x17\xB7\v\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x5\x1B\xC1\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x2\x2\x2"+
		"%\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2\x2\a\x4\x2"+
		"\x10\x10\x16\x16\x4\x2\x12\x12\x16\x16\x3\x2\x13\x14\x3\x2\x15\x16\x4"+
		"\x2\x11\x11\x16\x16\xC8\x2L\x3\x2\x2\x2\x4O\x3\x2\x2\x2\x6]\x3\x2\x2\x2"+
		"\b\x66\x3\x2\x2\x2\ni\x3\x2\x2\x2\fk\x3\x2\x2\x2\xEm\x3\x2\x2\x2\x10o"+
		"\x3\x2\x2\x2\x12x\x3\x2\x2\x2\x14\x81\x3\x2\x2\x2\x16\x87\x3\x2\x2\x2"+
		"\x18\x89\x3\x2\x2\x2\x1A\x8B\x3\x2\x2\x2\x1C\x8D\x3\x2\x2\x2\x1E\x8F\x3"+
		"\x2\x2\x2 \x98\x3\x2\x2\x2\"\x9A\x3\x2\x2\x2$\x9D\x3\x2\x2\x2&\xAA\x3"+
		"\x2\x2\x2(\xAC\x3\x2\x2\x2*\xAE\x3\x2\x2\x2,\xB0\x3\x2\x2\x2.\xB8\x3\x2"+
		"\x2\x2\x30\xBB\x3\x2\x2\x2\x32\xBD\x3\x2\x2\x2\x34\xC0\x3\x2\x2\x2\x36"+
		"\xC5\x3\x2\x2\x2\x38\xC7\x3\x2\x2\x2:\xC9\x3\x2\x2\x2<\xCB\x3\x2\x2\x2"+
		">\xD5\x3\x2\x2\x2@\xD7\x3\x2\x2\x2\x42\xD9\x3\x2\x2\x2\x44\xDB\x3\x2\x2"+
		"\x2\x46\xDD\x3\x2\x2\x2HK\x5\x4\x3\x2IK\x5<\x1F\x2JH\x3\x2\x2\x2JI\x3"+
		"\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2M\x3\x3\x2\x2\x2NL"+
		"\x3\x2\x2\x2OP\x5\n\x6\x2PQ\x5\f\a\x2QR\x5\x6\x4\x2RS\a\x3\x2\x2ST\x5"+
		"\b\x5\x2TU\a\x4\x2\x2U\x5\x3\x2\x2\x2VZ\a\n\x2\x2WY\x5\xE\b\x2XW\x3\x2"+
		"\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3"+
		"\x2\x2\x2]V\x3\x2\x2\x2]^\x3\x2\x2\x2^\a\x3\x2\x2\x2_\x62\x5\x34\x1B\x2"+
		"`\x62\x5\x10\t\x2\x61_\x3\x2\x2\x2\x61`\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2"+
		"\x62\x63\x3\x2\x2\x2\x63\x65\a\t\x2\x2\x64\x61\x3\x2\x2\x2\x65h\x3\x2"+
		"\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\t\x3\x2\x2\x2h\x66\x3\x2"+
		"\x2\x2ij\t\x2\x2\x2j\v\x3\x2\x2\x2kl\a\x16\x2\x2l\r\x3\x2\x2\x2mn\a\x16"+
		"\x2\x2n\xF\x3\x2\x2\x2os\x5\x12\n\x2pr\x5\x1E\x10\x2qp\x3\x2\x2\x2ru\x3"+
		"\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tv\x3\x2\x2\x2us\x3\x2\x2\x2vw\x5"+
		"$\x13\x2w\x11\x3\x2\x2\x2xy\a\a\x2\x2yz\x5\x16\f\x2z{\a\x5\x2\x2{|\a\v"+
		"\x2\x2|}\x5\x14\v\x2}~\a\v\x2\x2~\x7F\a\x6\x2\x2\x7F\x80\a\b\x2\x2\x80"+
		"\x13\x3\x2\x2\x2\x81\x82\x5\x18\r\x2\x82\x83\a\n\x2\x2\x83\x84\x5\x1A"+
		"\xE\x2\x84\x85\a\n\x2\x2\x85\x86\x5\x1C\xF\x2\x86\x15\x3\x2\x2\x2\x87"+
		"\x88\t\x3\x2\x2\x88\x17\x3\x2\x2\x2\x89\x8A\a\x16\x2\x2\x8A\x19\x3\x2"+
		"\x2\x2\x8B\x8C\a\x16\x2\x2\x8C\x1B\x3\x2\x2\x2\x8D\x8E\a\x16\x2\x2\x8E"+
		"\x1D\x3\x2\x2\x2\x8F\x90\a\a\x2\x2\x90\x91\x5 \x11\x2\x91\x92\a\x5\x2"+
		"\x2\x92\x93\a\v\x2\x2\x93\x94\x5\"\x12\x2\x94\x95\a\v\x2\x2\x95\x96\a"+
		"\x6\x2\x2\x96\x97\a\b\x2\x2\x97\x1F\x3\x2\x2\x2\x98\x99\a\x16\x2\x2\x99"+
		"!\x3\x2\x2\x2\x9A\x9B\a\x18\x2\x2\x9B#\x3\x2\x2\x2\x9C\x9E\x5&\x14\x2"+
		"\x9D\x9C\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x5"+
		"(\x15\x2\xA0\xA1\x5*\x16\x2\xA1\xA5\a\x5\x2\x2\xA2\xA4\x5,\x17\x2\xA3"+
		"\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2"+
		"\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xA9\a\x6\x2\x2\xA9"+
		"%\x3\x2\x2\x2\xAA\xAB\t\x4\x2\x2\xAB\'\x3\x2\x2\x2\xAC\xAD\t\x5\x2\x2"+
		"\xAD)\x3\x2\x2\x2\xAE\xAF\a\x16\x2\x2\xAF+\x3\x2\x2\x2\xB0\xB5\x5.\x18"+
		"\x2\xB1\xB2\a\r\x2\x2\xB2\xB4\x5.\x18\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB7\x3"+
		"\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6-\x3\x2\x2\x2\xB7"+
		"\xB5\x3\x2\x2\x2\xB8\xB9\x5\x30\x19\x2\xB9\xBA\x5\x32\x1A\x2\xBA/\x3\x2"+
		"\x2\x2\xBB\xBC\t\x5\x2\x2\xBC\x31\x3\x2\x2\x2\xBD\xBE\a\x16\x2\x2\xBE"+
		"\x33\x3\x2\x2\x2\xBF\xC1\x5\x36\x1C\x2\xC0\xBF\x3\x2\x2\x2\xC0\xC1\x3"+
		"\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x5\x38\x1D\x2\xC3\xC4\x5:\x1E\x2"+
		"\xC4\x35\x3\x2\x2\x2\xC5\xC6\t\x4\x2\x2\xC6\x37\x3\x2\x2\x2\xC7\xC8\t"+
		"\x5\x2\x2\xC8\x39\x3\x2\x2\x2\xC9\xCA\a\x16\x2\x2\xCA;\x3\x2\x2\x2\xCB"+
		"\xCC\x5> \x2\xCC\xCD\x5@!\x2\xCD\xCE\a\n\x2\x2\xCE\xCF\x5\x44#\x2\xCF"+
		"\xD0\a\xF\x2\x2\xD0\xD1\x5\x42\"\x2\xD1\xD2\a\n\x2\x2\xD2\xD3\x5\x46$"+
		"\x2\xD3\xD4\a\t\x2\x2\xD4=\x3\x2\x2\x2\xD5\xD6\t\x6\x2\x2\xD6?\x3\x2\x2"+
		"\x2\xD7\xD8\a\x16\x2\x2\xD8\x41\x3\x2\x2\x2\xD9\xDA\a\x16\x2\x2\xDA\x43"+
		"\x3\x2\x2\x2\xDB\xDC\a\x16\x2\x2\xDC\x45\x3\x2\x2\x2\xDD\xDE\a\x16\x2"+
		"\x2\xDEG\x3\x2\x2\x2\rJLZ]\x61\x66s\x9D\xA5\xB5\xC0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR
