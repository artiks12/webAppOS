//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Artis\source\repos\ANTLR\ANTLR\LanguageLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	public const int
		CURLYOPEN=1, CURLYCLOSE=2, BRACKETOPEN=3, BRACKETCLOSE=4, SQUAREOPEN=5, 
		SQUARECLOSE=6, SEMICOLON=7, COLON=8, QUOTE=9, DOT=10, COMA=11, HASH=12, 
		ARROWS=13, PROTECTION=14, NAME=15, WS=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"PROTECTION", "NAME", "WS"
	};


	public LanguageLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "':'", "'\"'", 
		"'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "SQUAREOPEN", 
		"SQUARECLOSE", "SEMICOLON", "COLON", "QUOTE", "DOT", "COMA", "HASH", "ARROWS", 
		"PROTECTION", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x12j\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f"+
		"\x3\r\x3\r\x3\xE\x3\xE\x6\xE>\n\xE\r\xE\xE\xE?\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x6\xEG\n\xE\r\xE\xE\xEH\x5\xEK\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xFZ\n\xF\x3\x10"+
		"\x6\x10]\n\x10\r\x10\xE\x10^\x3\x10\a\x10\x62\n\x10\f\x10\xE\x10\x65\v"+
		"\x10\x3\x11\x3\x11\x3\x11\x3\x11\x2\x2\x2\x12\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12\x3\x2\x5\x5\x2\x43\\\x61"+
		"\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xE\xF\"\"o\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2"+
		"\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2"+
		"\x2\x3#\x3\x2\x2\x2\x5%\x3\x2\x2\x2\a\'\x3\x2\x2\x2\t)\x3\x2\x2\x2\v+"+
		"\x3\x2\x2\x2\r-\x3\x2\x2\x2\xF/\x3\x2\x2\x2\x11\x31\x3\x2\x2\x2\x13\x33"+
		"\x3\x2\x2\x2\x15\x35\x3\x2\x2\x2\x17\x37\x3\x2\x2\x2\x19\x39\x3\x2\x2"+
		"\x2\x1BJ\x3\x2\x2\x2\x1DY\x3\x2\x2\x2\x1F\\\x3\x2\x2\x2!\x66\x3\x2\x2"+
		"\x2#$\a}\x2\x2$\x4\x3\x2\x2\x2%&\a\x7F\x2\x2&\x6\x3\x2\x2\x2\'(\a*\x2"+
		"\x2(\b\x3\x2\x2\x2)*\a+\x2\x2*\n\x3\x2\x2\x2+,\a]\x2\x2,\f\x3\x2\x2\x2"+
		"-.\a_\x2\x2.\xE\x3\x2\x2\x2/\x30\a=\x2\x2\x30\x10\x3\x2\x2\x2\x31\x32"+
		"\a<\x2\x2\x32\x12\x3\x2\x2\x2\x33\x34\a$\x2\x2\x34\x14\x3\x2\x2\x2\x35"+
		"\x36\a\x30\x2\x2\x36\x16\x3\x2\x2\x2\x37\x38\a.\x2\x2\x38\x18\x3\x2\x2"+
		"\x2\x39:\a%\x2\x2:\x1A\x3\x2\x2\x2;=\a>\x2\x2<>\a/\x2\x2=<\x3\x2\x2\x2"+
		">?\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41K\a@\x2"+
		"\x2\x42\x43\a>\x2\x2\x43\x44\a@\x2\x2\x44\x46\x3\x2\x2\x2\x45G\a/\x2\x2"+
		"\x46\x45\x3\x2\x2\x2GH\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IK\x3"+
		"\x2\x2\x2J;\x3\x2\x2\x2J\x42\x3\x2\x2\x2K\x1C\x3\x2\x2\x2LM\ar\x2\x2M"+
		"N\aw\x2\x2NO\a\x64\x2\x2OP\an\x2\x2PQ\ak\x2\x2QZ\a\x65\x2\x2RS\ar\x2\x2"+
		"ST\at\x2\x2TU\ak\x2\x2UV\ax\x2\x2VW\a\x63\x2\x2WX\av\x2\x2XZ\ag\x2\x2"+
		"YL\x3\x2\x2\x2YR\x3\x2\x2\x2Z\x1E\x3\x2\x2\x2[]\t\x2\x2\x2\\[\x3\x2\x2"+
		"\x2]^\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x63\x3\x2\x2\x2`\x62\t"+
		"\x3\x2\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64 \x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\t\x4\x2\x2"+
		"gh\x3\x2\x2\x2hi\b\x11\x2\x2i\"\x3\x2\x2\x2\t\x2?HJY^\x63\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR
